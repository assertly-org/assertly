!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var n,t=1,o=arguments.length;t<o;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}).apply(this,arguments)},r=this&&this.__awaiter||function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function c(e){try{u(o.next(e))}catch(e){i(e)}}function l(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(c,l)}u((o=o.apply(e,n||[])).next())}))},i=this&&this.__generator||function(e,n){var t,o,r,i,c={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;c;)try{if(t=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,o=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!(r=c.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){c=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){c.label=i[1];break}if(6===i[0]&&c.label<r[1]){c.label=r[1],r=i;break}if(r&&c.label<r[2]){c.label=r[2],c.ops.push(i);break}r[2]&&c.ops.pop(),c.trys.pop();continue}i=n.call(e,c)}catch(e){i=[6,e],o=0}finally{t=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var l=t(1),u=c(t(2)),a=function(){var e=this;this.eventsToRecord=["click","change"],this.componentEventCache=[],this.previousComponent=null,this.previousMsg=null,this.start=function(){e.eventRecorder.start()},this.stop=function(){e.eventRecorder.stop()},this.clearEventCache=function(){e.componentEventCache=[]},this.reconcileEventCache=function(n){(n.target?l.findReactElement(n.target):null)!==e.previousComponent&&(e.componentEventCache.forEach((function(e){console.log("in the reconcile")})),e.clearEventCache())},this.removeMenusByClassname=function(e){var n=Array.from(document.getElementsByClassName(e));null==n||n.map((function(e){return e.remove()}))},this.setupMenuDiv=function(e){var n="componentMenu"+(new Date).getTime(),t=document.createElement("DIV");return t.setAttribute("id",n),t.setAttribute("class","componentMenu"),document.body.appendChild(t),t.style.position="absolute",t.style.left=e.x+"px",t.style.top=e.y+"px",t.style.zIndex="9999999999999",n},this.appendButton=function(e,n){var t,o=document.createElement("BUTTON");return o.style.width="150px",o.innerHTML=n,null===(t=document.getElementById(e))||void 0===t||t.appendChild(o),o},this.appendCancelButton=function(n){var t,o=document.createElement("BUTTON");o.style.width="150px",o.innerHTML="Cancel",o.addEventListener("click",(function(){return r(e,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this.removeSingleMenu(n)];case 1:return[2,e.sent()]}}))}))})),null===(t=document.getElementById(n))||void 0===t||t.appendChild(o)},this.createPopupMenu=function(n,t){var o;e.removeMenusByClassname("componentMenu");var c=e.setupMenuDiv(t);null===(o=null==n?void 0:n.componentInfo)||void 0===o||o.map((function(t){var o,l;console.log("button val: ",t);var u=document.createElement("BUTTON");if(u.style.width="150px",u.innerHTML=null==t?void 0:t.componentName,u.innerHTML){u.addEventListener("click",(function(t){return r(e,void 0,void 0,(function(){return i(this,(function(e){return[2,this.componentMenuClick(t,c,n)]}))}))})),null===(o=document.getElementById(c))||void 0===o||o.appendChild(u);var a=document.createElement("br");null===(l=document.getElementById(c))||void 0===l||l.appendChild(a)}})),e.appendButton(c,"Cancel").addEventListener("click",(function(){return r(e,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this.removeSingleMenu(c)];case 1:return[2,e.sent()]}}))}))}))},this.createExistingTestMenu=function(n,t){return r(e,void 0,void 0,(function(){var e,t=this;return i(this,(function(o){return e=this.setupMenuDiv(n),["a","b"].map((function(n){var t,o,r=document.createElement("BUTTON");r.style.width="150px",r.innerHTML=n,null===(t=document.getElementById(e))||void 0===t||t.appendChild(r);var i=document.createElement("br");null===(o=document.getElementById(e))||void 0===o||o.appendChild(i)})),this.appendButton(e,"Create New Test"),this.appendButton(e,"Cancel").addEventListener("click",(function(){return r(t,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return[4,this.removeSingleMenu(e)];case 1:return[2,n.sent()]}}))}))})),[2]}))}))},this.removeSingleMenu=function(n){return r(e,void 0,void 0,(function(){var e;return i(this,(function(t){return null==(e=document.getElementById(n))||e.remove(),[2]}))}))},this.componentMenuClick=function(n,t,c){return r(e,void 0,void 0,(function(){var e,r,l;return i(this,(function(i){switch(i.label){case 0:return[4,this.removeSingleMenu(t)];case 1:return i.sent(),e=null===(l=c.componentInfo)||void 0===l?void 0:l.reduce((function(e,t){var r;return t.componentName===(null===(r=n.target)||void 0===r?void 0:r.innerHTML)?o({},t):e}),null),null==n||n.stopPropagation(),[4,this.checkForExistingTest(null==e?void 0:e.filename)];case 2:return r=i.sent(),[4,this.createExistingTestMenu(n,r)];case 3:return i.sent(),[2]}}))}))},this.getMessage=function(e,n){var t,r,i,c=n.target||n.srcElement,u=c,a=c,s=l.getComponentInfo(e,10,[]),d=null===(r=null===(t=null==s?void 0:s.slice(0))||void 0===t?void 0:t.reverse())||void 0===r?void 0:r.reduce((function(e,n){var t;return(null===(t=n.props)||void 0===t?void 0:t.onClick)?o({},n):e}),null);return{action:n.type,checked:(null===(i=null==n?void 0:n.target)||void 0===i?void 0:i.hasOwnProperty("checked"))?u.checked:null,coordinates:l.getCoordinates(n),href:a.href?a.href:null,keyCode:n.keyCode?n.keyCode:null,tagName:u.tagName,tagType:u.type,textContent:u.textContent||u.innerText,timestamp:(new Date).getTime(),value:u.value,writeTestLocation:"",componentInfo:s,clickHandlerComponent:d}},this.recordEvent=function(n){var t,o,r=n.target,i=n;if(!(null===(o=null===(t=null==r?void 0:r.parentElement)||void 0===t?void 0:t.getAttribute("id"))||void 0===o?void 0:o.includes("componentMenu"))&&n.target)try{if(e.previousMsg&&("change"===n.type||"click"===n.type)&&e.previousMsg&&"click"===e.previousMsg.action&&(new Date).getTime()-e.previousMsg.timestamp<100)return void console.log("message not send due to time");var c=l.findReactElement(n.target),u=e.getMessage(c,n);console.log("reactComponent and message in RECORD_EVENT: ",c,u),localStorage.setItem("lastEvent",JSON.stringify(u)),e.previousMsg=u,e.previousComponent=c,(null==i?void 0:i.metaKey)&&e.createPopupMenu(u,i)}catch(e){console.error("Error recording event",e)}},this.createNewTest=function(n){return r(e,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return(e=window.dataLayer[0].apiKey)||(e=1),[4,fetch("//localhost:3020/api/accounts/"+e+"/events/",{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:window.location.href,event:n,placeholder:null})})];case 1:return[2,t.sent().json()]}}))}))},this.checkForExistingTest=function(n){return r(e,void 0,void 0,(function(){var e,t,o;return i(this,(function(r){switch(r.label){case 0:return(e=window.dataLayer[0].apiKey)||(e=1),t=encodeURI(n),o="//localhost:3020/api/accounts/"+e+"/events/?filepath="+t,console.log("url hit: ",o,t),[4,fetch(o,{method:"GET",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"}})];case 1:return[2,r.sent().json()]}}))}))},this.eventRecorder=new u.default({recordEvents:this.eventsToRecord,eventCallback:this.recordEvent,reconcileCallback:this.reconcileEventCache})};n.default=a,window.eventRecorder=new a,window.eventRecorder.start()},function(e,n,t){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var n,t=1,o=arguments.length;t<o;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}).apply(this,arguments)};function r(e,n){var t;if(void 0===n&&(n={}),!e)return l(n),n;var i=e.pendingProps?o(o({},n),e.pendingProps):n;return delete i.children,(null===(t=null==e?void 0:e.type)||void 0===t?void 0:t.__proto__)&&["Component","PureComponent"].includes(e.type.__proto__.name)?(l(i),i):r(e._debugOwner,i)}function i(e){return e?e.elementType&&e.elementType.name?e.elementType.name:e.elementType&&e.elementType.displayName?e.elementType.displayName:e.type.displayName?e.type.displayName:e.type.name?e.type.name:i(e._debugOwner):null}Object.defineProperty(n,"__esModule",{value:!0}),n.functionStringify=n.findReactElement=n.findReactElementDURKA=n.getCoordinates=n.getComponentName=n.getComponentProps=n.getComponentInfo=void 0,n.getComponentInfo=function e(n,t,o){var c,l,u,a,s;if(console.log("getComponentInfo: ",n,o),!n||0===t)return o;if(null===(c=null==n?void 0:n._debugSource)||void 0===c?void 0:c.fileName){var d=r(null==n?void 0:n._debugOwner),v=i(null==n?void 0:n._debugOwner);return o.push({filename:null===(l=null==n?void 0:n._debugSource)||void 0===l?void 0:l.fileName,linenumber:null===(u=null==n?void 0:n._debugSource)||void 0===u?void 0:u.lineNumber,props:d,componentName:"Component"===v?null===(s=null===(a=null==n?void 0:n._debugSource)||void 0===a?void 0:a.fileName)||void 0===s?void 0:s.split("\\").pop().split("/").pop().split(".")[0]:v}),e(null==n?void 0:n._debugOwner,t-1,o)}return e(null==n?void 0:n._debugOwner,t-1,o)},n.getComponentProps=r,n.getComponentName=i;var c={mouseup:!0,mousedown:!0,mousemove:!0,mouseover:!0};function l(e){for(var n in e)if(e[n]&&"[object Function]"==={}.toString.call(e[n]))try{e[n]="[Function]"}catch(e){console.error("Error stringifying prop",e)}!function(e){for(var n=Object.keys(e),t=0,o=n;t<o.length;t++){var r=o[t];"[object Object]"!==Object.prototype.toString.call(e[r])||!e[r].hasOwnProperty("_owner")&&"inputRef"!==r&&"InputProps"!==r||delete e[r]}}(e)}n.getCoordinates=function(e){var n=e;return c[e.type]?{x:n.clientX,y:n.clientY}:null},n.findReactElementDURKA=function(e){var n=Object.keys(e).find((function(e){return e.startsWith("__reactInternalInstance$")})),t=n?e[n]:null;return null==t?null:t},n.findReactElement=function(e){var n=e;for(var t in n)if(t.startsWith("__reactInternalInstance$"))return n[t];return null},n.functionStringify=l},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=function(e){var n=this;this.recordEvents=[],this.reconcileEvents=["blur","focus","change"],this.addAllListeners=function(){n.recordEvents.forEach((function(e){window.addEventListener(e,n.eventCallback,!0)})),n.reconcileEvents.forEach((function(e){window.addEventListener(e,n.reconcileCallback,!0)}))},this.removeAllListeners=function(){n.recordEvents.forEach((function(e){window.removeEventListener(e,n.eventCallback,!0)})),n.reconcileEvents.forEach((function(e){window.removeEventListener(e,n.reconcileCallback,!0)}))},this.start=function(){window.recorderAddedControlListeners||(n.addAllListeners(),window.recorderAddedControlListeners=!0)},this.stop=function(){window.recorderAddedControlListeners&&(n.removeAllListeners(),window.recorderAddedControlListeners=!1)};var t=e.eventCallback,o=e.reconcileCallback,r=e.recordEvents,i=e.reconcileEvents,c=void 0===i?null:i;this.eventCallback=t,this.reconcileCallback=o,this.recordEvents=r,c&&(this.reconcileEvents=c)};n.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NsaWVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50LXJlY29yZGVyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZXZlbnRzVG9SZWNvcmQiLCJjb21wb25lbnRFdmVudENhY2hlIiwicHJldmlvdXNDb21wb25lbnQiLCJwcmV2aW91c01zZyIsInN0YXJ0IiwiZXZlbnRSZWNvcmRlciIsInN0b3AiLCJjbGVhckV2ZW50Q2FjaGUiLCJyZWNvbmNpbGVFdmVudENhY2hlIiwiZXZlbnQiLCJ0YXJnZXQiLCJmaW5kUmVhY3RFbGVtZW50IiwiZm9yRWFjaCIsIm1zZyIsImNvbnNvbGUiLCJsb2ciLCJyZW1vdmVNZW51c0J5Q2xhc3NuYW1lIiwiY2xhc3NuYW1lIiwicHJldmlvdXNNZW51cyIsIkFycmF5IiwiZnJvbSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIm1hcCIsInZhbCIsInJlbW92ZSIsInNldHVwTWVudURpdiIsIm1vdXNlRXZlbnQiLCJkaXZJRCIsIkRhdGUiLCJnZXRUaW1lIiwibWVudURpdiIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsIngiLCJ0b3AiLCJ5IiwiekluZGV4IiwiYXBwZW5kQnV0dG9uIiwiZWxJRCIsImxhYmVsIiwiYnRuIiwid2lkdGgiLCJpbm5lckhUTUwiLCJnZXRFbGVtZW50QnlJZCIsImFwcGVuZENhbmNlbEJ1dHRvbiIsIkNhbmNlbEJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGlzIiwicmVtb3ZlU2luZ2xlTWVudSIsImNyZWF0ZVBvcHVwTWVudSIsIm1lc3NhZ2UiLCJjb21wb25lbnRJbmZvIiwiY29tcG9uZW50TmFtZSIsImNvbXBvbmVudE1lbnVDbGljayIsImJyIiwiY3JlYXRlRXhpc3RpbmdUZXN0TWVudSIsImV4aXN0aW5nVGVzdFJlc3BvbnNlIiwiZXhpc3RpbmdUZXN0RGl2SUQiLCJzZWxlY3RlZENvbXBvbmVudCIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJzdG9wUHJvcGFnYXRpb24iLCJjaGVja0ZvckV4aXN0aW5nVGVzdCIsImZpbGVuYW1lIiwiZ2V0TWVzc2FnZSIsInJlYWN0Q29tcG9uZW50Iiwic3JjRWxlbWVudCIsImlucHV0VGFyZ2V0IiwibGlua1RhcmdldCIsImdldENvbXBvbmVudEluZm8iLCJjbGlja0hhbmRsZXIiLCJzbGljZSIsInJldmVyc2UiLCJhY2N1bXVsYXRvciIsImN1cnJlbnRWYWx1ZSIsInByb3BzIiwib25DbGljayIsImFjdGlvbiIsInR5cGUiLCJjaGVja2VkIiwiY29vcmRpbmF0ZXMiLCJnZXRDb29yZGluYXRlcyIsImhyZWYiLCJrZXlDb2RlIiwidGFnTmFtZSIsInRhZ1R5cGUiLCJ0ZXh0Q29udGVudCIsImlubmVyVGV4dCIsInRpbWVzdGFtcCIsIndyaXRlVGVzdExvY2F0aW9uIiwiY2xpY2tIYW5kbGVyQ29tcG9uZW50IiwicmVjb3JkRXZlbnQiLCJub2RlVGFyZ2V0IiwicGFyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImluY2x1ZGVzIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRhS2V5IiwiZSIsImVycm9yIiwiY3JlYXRlTmV3VGVzdCIsImFjY291bnRJZCIsIndpbmRvdyIsImZldGNoIiwibWV0aG9kIiwiY2FjaGUiLCJjcmVkZW50aWFscyIsImhlYWRlcnMiLCJ1cmwiLCJsb2NhdGlvbiIsInBsYWNlaG9sZGVyIiwianNvbiIsImZpbGVwYXRoIiwidXJpRmlsZXBhdGgiLCJlbmNvZGVVUkkiLCJyZWNvcmRFdmVudHMiLCJldmVudENhbGxiYWNrIiwicmVjb25jaWxlQ2FsbGJhY2siLCJBc3NlcnRseUNsaWVudCIsImdldENvbXBvbmVudFByb3BzIiwiY29tcG9uZW50IiwiZnVuY3Rpb25TdHJpbmdpZnkiLCJuZXdQcm9wcyIsInBlbmRpbmdQcm9wcyIsImNoaWxkcmVuIiwiX19wcm90b19fIiwiX2RlYnVnT3duZXIiLCJnZXRDb21wb25lbnROYW1lIiwiZmliZXIiLCJlbGVtZW50VHlwZSIsImRpc3BsYXlOYW1lIiwibWF4TmVzdCIsInJlc3VsdEFycmF5IiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJwdXNoIiwibGluZW51bWJlciIsImxpbmVOdW1iZXIiLCJzcGxpdCIsInBvcCIsImV2ZW50c1dpdGhDb29yZGluYXRlcyIsIm1vdXNldXAiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJtb3VzZW92ZXIiLCJvYmoiLCJrIiwidG9TdHJpbmciLCJrZXlzIiwic3RyaXBFeHRyYUNvbXBvbmVudFByb3BzIiwiY2xpZW50WCIsImNsaWVudFkiLCJmaW5kIiwic3RhcnRzV2l0aCIsImludGVybmFsSW5zdGFuY2UiLCJ0YXJnZXRNYXAiLCJjb25maWciLCJyZWNvbmNpbGVFdmVudHMiLCJhZGRBbGxMaXN0ZW5lcnMiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVjb3JkZXJBZGRlZENvbnRyb2xMaXN0ZW5lcnMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1C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RUFBSzVDLGFBQWFqSCxTQUFRLFNBQUNILEdBQ3pCdUcsT0FBTzBELG9CQUFvQmpLLEVBQU8sRUFBS3FILGVBQWUsTUFFeEQsRUFBS3lDLGdCQUFnQjNKLFNBQVEsU0FBQ0gsR0FDNUJ1RyxPQUFPMEQsb0JBQW9CakssRUFBTyxFQUFLc0gsbUJBQW1CLE9BSTlELEtBQUEzSCxNQUFRLFdBQ0Q0RyxPQUFPMkQsZ0NBQ1YsRUFBS0gsa0JBQ0x4RCxPQUFPMkQsK0JBQWdDLElBSTNDLEtBQUFySyxLQUFPLFdBQ0QwRyxPQUFPMkQsZ0NBQ1QsRUFBS0YscUJBQ0x6RCxPQUFPMkQsK0JBQWdDLElBMUN2QyxJQUFBN0MsRUFJRXdDLEVBQU0sY0FIUnZDLEVBR0V1QyxFQUFNLGtCQUZSekMsRUFFRXlDLEVBQU0sYUFEUixFQUNFQSxFQUFNLGdCQURSQyxPQUFlLElBQUcsT0FBSSxFQUV4QmxILEtBQUt5RSxjQUFnQkEsRUFDckJ6RSxLQUFLMEUsa0JBQW9CQSxFQUN6QjFFLEtBQUt3RSxhQUFlQSxFQUNoQjBDLElBQ0ZsSCxLQUFLa0gsZ0JBQWtCQSxJIiwiZmlsZSI6ImFzc2VydGx5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0IHtcbiAgZmluZFJlYWN0RWxlbWVudCxcbiAgZ2V0Q29vcmRpbmF0ZXMsXG4gIGdldENvbXBvbmVudE5hbWUsXG4gIGdldENvbXBvbmVudFByb3BzLFxuICBnZXRDb21wb25lbnRJbmZvXG59IGZyb20gXCIuL3V0aWxzXCI7XG5cblxuaW1wb3J0IEV2ZW50UmVjb3JkZXIgZnJvbSBcIi4vZXZlbnQtcmVjb3JkZXJcIjtcbmltcG9ydCBDbGllbnRJbnRlcmZhY2UgZnJvbSBcIi4vdHlwZXMvQ2xpZW50XCI7XG5pbXBvcnQgTWVzc2FnZSBmcm9tIFwiLi90eXBlcy9NZXNzYWdlXCI7XG5pbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tIFwiLi90eXBlcy9FdmVudFR5cGVcIjtcblxuaW50ZXJmYWNlIENvbXBvbmVudCB7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2VydGx5Q2xpZW50IGltcGxlbWVudHMgQ2xpZW50SW50ZXJmYWNlIHtcbiAgZXZlbnRzVG9SZWNvcmQ6IEV2ZW50VHlwZVtdID0gW1wiY2xpY2tcIiwgXCJjaGFuZ2VcIl07XG5cbiAgcHJpdmF0ZSBldmVudFJlY29yZGVyOiBFdmVudFJlY29yZGVyO1xuICBwcml2YXRlIGNvbXBvbmVudEV2ZW50Q2FjaGU6IE1lc3NhZ2VbXSA9IFtdO1xuICBwcml2YXRlIHByZXZpb3VzQ29tcG9uZW50OiBDb21wb25lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBwcmV2aW91c01zZzogTWVzc2FnZSB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZXZlbnRSZWNvcmRlciA9IG5ldyBFdmVudFJlY29yZGVyKHtcbiAgICAgIHJlY29yZEV2ZW50czogdGhpcy5ldmVudHNUb1JlY29yZCxcbiAgICAgIGV2ZW50Q2FsbGJhY2s6IHRoaXMucmVjb3JkRXZlbnQsXG4gICAgICByZWNvbmNpbGVDYWxsYmFjazogdGhpcy5yZWNvbmNpbGVFdmVudENhY2hlLFxuICAgIH0pO1xuICB9XG5cbiAgc3RhcnQgPSAoKSA9PiB7XG4gICAgdGhpcy5ldmVudFJlY29yZGVyLnN0YXJ0KCk7XG4gIH07XG5cbiAgc3RvcCA9ICgpID0+IHtcbiAgICB0aGlzLmV2ZW50UmVjb3JkZXIuc3RvcCgpO1xuICB9O1xuXG4gIGNsZWFyRXZlbnRDYWNoZSA9ICgpID0+IHtcbiAgICB0aGlzLmNvbXBvbmVudEV2ZW50Q2FjaGUgPSBbXTtcbiAgfTtcblxuICByZWNvbmNpbGVFdmVudENhY2hlID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgIGNvbnN0IHJlYWN0Q29tcG9uZW50ID0gZXZlbnQudGFyZ2V0ID8gZmluZFJlYWN0RWxlbWVudChldmVudC50YXJnZXQpIDogbnVsbDtcbiAgICBpZiAocmVhY3RDb21wb25lbnQgIT09IHRoaXMucHJldmlvdXNDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50RXZlbnRDYWNoZS5mb3JFYWNoKChtc2cpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ2luIHRoZSByZWNvbmNpbGUnKTtcbiAgICAgICAgLy8gdGhpcy5zZW5kRXZlbnQobXNnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jbGVhckV2ZW50Q2FjaGUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gcmVtb3ZlIGFsbCBkaXZzIHdpdGggYSBjZXJ0YWluIGNsYXNzbmFtZVxuICByZW1vdmVNZW51c0J5Q2xhc3NuYW1lID0gKGNsYXNzbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgcHJldmlvdXNNZW51cyA9IEFycmF5LmZyb20oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc25hbWUpKTtcbiAgICBwcmV2aW91c01lbnVzPy5tYXAoKHZhbDogYW55KSA9PiB2YWwucmVtb3ZlKCkpO1xuICB9XG5cbiAgc2V0dXBNZW51RGl2ID0gKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBldmVudFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBjb25zdCBkaXZJRCA9IFwiY29tcG9uZW50TWVudVwiICsgZXZlbnRUaW1lO1xuICAgIGNvbnN0IG1lbnVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO1xuXG4gICAgbWVudURpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBkaXZJRCk7XG4gICAgbWVudURpdi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCAnY29tcG9uZW50TWVudScpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWVudURpdik7XG4gICAgbWVudURpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICBtZW51RGl2LnN0eWxlLmxlZnQgPSBtb3VzZUV2ZW50LnggKyAncHgnO1xuICAgIG1lbnVEaXYuc3R5bGUudG9wID0gbW91c2VFdmVudC55ICsgJ3B4JztcbiAgICBtZW51RGl2LnN0eWxlLnpJbmRleCA9ICc5OTk5OTk5OTk5OTk5JztcbiAgICByZXR1cm4gZGl2SURcbiAgfVxuICAvLyB0aGUgbGlzdGVuZXJGbiBpcyBleHBlY3RpbmcgYW4gYXN5bmMgZnVuY3Rpb24gd2hpY2ggdGFrZXMgYW4gZWxlbWVudElEIGFzIGEgcGFyYW1ldGVyXG4gIGFwcGVuZEJ1dHRvbiA9IChlbElEOnN0cmluZyAsIGxhYmVsOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiQlVUVE9OXCIpO1xuICAgIGJ0bi5zdHlsZS53aWR0aCA9ICcxNTBweCc7XG4gICAgYnRuLmlubmVySFRNTCA9IGxhYmVsO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsSUQpPy5hcHBlbmRDaGlsZChidG4pO1xuICAgIHJldHVybiBidG5cbiAgfVxuXG4gIGFwcGVuZENhbmNlbEJ1dHRvbiA9IChlbElEOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBDYW5jZWxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiQlVUVE9OXCIpO1xuICAgIENhbmNlbEJ0bi5zdHlsZS53aWR0aCA9ICcxNTBweCc7XG4gICAgQ2FuY2VsQnRuLmlubmVySFRNTCA9ICdDYW5jZWwnO1xuICAgIENhbmNlbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IGF3YWl0IHRoaXMucmVtb3ZlU2luZ2xlTWVudShlbElEKSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxJRCk/LmFwcGVuZENoaWxkKENhbmNlbEJ0bik7XG4gIH1cblxuICBjcmVhdGVQb3B1cE1lbnUgPSAobWVzc2FnZTogTWVzc2FnZSwgbW91c2VFdmVudDogTW91c2VFdmVudCkgPT4ge1xuXG4gICAgLy8gcmVtb3ZlIGFsbCBleGlzdGluZyBtZW51c1xuICAgIHRoaXMucmVtb3ZlTWVudXNCeUNsYXNzbmFtZSgnY29tcG9uZW50TWVudScpXG4gICAgLy8gY3JlYXRlIHRoZSBkb20gZWxlbWVudCBhbmQgc3RvcmUgdGhlIGVsZW1lbnQgSURcbiAgICBjb25zdCBkaXZJRCA9IHRoaXMuc2V0dXBNZW51RGl2KG1vdXNlRXZlbnQpICAgIFxuXG4gICAgbWVzc2FnZT8uY29tcG9uZW50SW5mbz8ubWFwKCh2YWw6IGFueSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJidXR0b24gdmFsOiBcIiwgdmFsKTtcbiAgICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJCVVRUT05cIik7XG4gICAgICBidG4uc3R5bGUud2lkdGggPSAnMTUwcHgnO1xuICAgICAgYnRuLmlubmVySFRNTCA9IHZhbD8uY29tcG9uZW50TmFtZTtcbiAgICAgIGlmIChidG4uaW5uZXJIVE1MKSB7XG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChldmVudCkgPT4gdGhpcy5jb21wb25lbnRNZW51Q2xpY2soZXZlbnQsIGRpdklELCBtZXNzYWdlKSk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklEKT8uYXBwZW5kQ2hpbGQoYnRuKTtcbiAgICAgICAgY29uc3QgYnIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIik7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklEKT8uYXBwZW5kQ2hpbGQoYnIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IENhbmNlbEJ0biA9IHRoaXMuYXBwZW5kQnV0dG9uKGRpdklELCAnQ2FuY2VsJylcbiAgICBDYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLnJlbW92ZVNpbmdsZU1lbnUoZGl2SUQpKTtcblxuICB9O1xuXG4gIGNyZWF0ZUV4aXN0aW5nVGVzdE1lbnUgPSBhc3luYyAoZXZlbnQ6IGFueSwgZXhpc3RpbmdUZXN0UmVzcG9uc2U6IGFueSkgPT4ge1xuICAgXG4gICAgY29uc3QgZXhpc3RpbmdUZXN0RGl2SUQgPSB0aGlzLnNldHVwTWVudURpdihldmVudCkgIFxuICAgIGNvbnN0IHRlc3QgPSBbXCJhXCIsXCJiXCJdXG5cbiAgICB0ZXN0Lm1hcCggdmFsID0+IHtcbiAgICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJCVVRUT05cIik7XG4gICAgICBidG4uc3R5bGUud2lkdGggPSAnMTUwcHgnO1xuICAgICAgYnRuLmlubmVySFRNTCA9IHZhbDtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGV4aXN0aW5nVGVzdERpdklEKT8uYXBwZW5kQ2hpbGQoYnRuKTtcbiAgICAgIGNvbnN0IGJyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZXhpc3RpbmdUZXN0RGl2SUQpPy5hcHBlbmRDaGlsZChicik7XG4gICAgfSlcbiAgICBjb25zdCBuZXdUZXN0QnRuID0gdGhpcy5hcHBlbmRCdXR0b24oZXhpc3RpbmdUZXN0RGl2SUQsICdDcmVhdGUgTmV3IFRlc3QnKVxuICAgIGNvbnN0IGNhbmNlbEJ0biA9IHRoaXMuYXBwZW5kQnV0dG9uKGV4aXN0aW5nVGVzdERpdklELCAnQ2FuY2VsJylcbiAgICBjYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLnJlbW92ZVNpbmdsZU1lbnUoZXhpc3RpbmdUZXN0RGl2SUQpKTtcbiAgfVxuXG4gIHJlbW92ZVNpbmdsZU1lbnUgPSBhc3luYyAoZWxJRDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgbWVudURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsSUQpO1xuICAgIG1lbnVEaXY/LnJlbW92ZSgpO1xuICB9O1xuXG4gIGNvbXBvbmVudE1lbnVDbGljayA9IGFzeW5jIChldmVudDogYW55LCBkaXZJRDogYW55LCBtZXNzYWdlOiBNZXNzYWdlKTogUHJvbWlzZTxhbnk+ID0+IHtcblxuICAgIGF3YWl0IHRoaXMucmVtb3ZlU2luZ2xlTWVudShkaXZJRCk7XG5cbiAgICBjb25zdCBzZWxlY3RlZENvbXBvbmVudCA9IG1lc3NhZ2UuY29tcG9uZW50SW5mbz8ucmVkdWNlKFxuICAgICAgKGFjYzogYW55LCBjdXJyOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGN1cnIuY29tcG9uZW50TmFtZSA9PT0gZXZlbnQudGFyZ2V0Py5pbm5lckhUTUwpIHtcbiAgICAgICAgICByZXR1cm4gey4uLmN1cnJ9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH1cbiAgICAgIH0sIG51bGwpO1xuXG4gICAgZXZlbnQ/LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIFxuICAgIGNvbnN0IGV4aXN0aW5nVGVzdFJlc3BvbnNlID0gYXdhaXQgdGhpcy5jaGVja0ZvckV4aXN0aW5nVGVzdChzZWxlY3RlZENvbXBvbmVudD8uZmlsZW5hbWUpO1xuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jcmVhdGVFeGlzdGluZ1Rlc3RNZW51KGV2ZW50LCBleGlzdGluZ1Rlc3RSZXNwb25zZSlcblxuICAgIC8vIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAvLyAgIC4uLm1lc3NhZ2UsXG4gICAgLy8gICAvLyB0aGVyZSBzaG91bGQgb25seSBiZSBvbmUgbWF0Y2ggaGVyZSBvbiB0aGUgZmlsdGVyXG4gICAgLy8gICAvLyBjb21wb25lbnRJbmZvOiBtZXNzYWdlLmNvbXBvbmVudEluZm8/LmZpbHRlciggKHZhbDphbnkpID0+IHZhbC5jb21wb25lbnROYW1lID09PSBldmVudC50YXJnZXQ/LmlubmVySFRNTClcbiAgICAvLyAgIGNvbXBvbmVudEluZm86IHNlbGVjdGVkQ29tcG9uZW50XG4gICAgLy8gfSkudGhlbihyZXMgPT4ge2NvbnNvbGUubG9nKCdkb3QgdGhlbicsIHJlcyl9KTtcblxuXG4gIH07XG5cblxuXG4gIGdldE1lc3NhZ2UgPSAocmVhY3RDb21wb25lbnQ6IGFueSwgZXZlbnQ6IEtleWJvYXJkRXZlbnQgfCBFdmVudCk6IE1lc3NhZ2UgPT4ge1xuXG4gICAgLy8gZnVuY3Rpb24gdG8gdXNlIGluIGFycmF5IHJlZHVjZVxuICAgIGNvbnN0IGZpbmRDbGlja0hhbmRsZXIgPSAoYWNjdW11bGF0b3I6IGFueSwgY3VycmVudFZhbHVlOiBhbnkpID0+IHtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUucHJvcHM/Lm9uQ2xpY2spIHtcbiAgICAgICAgcmV0dXJuIHsuLi5jdXJyZW50VmFsdWV9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcbiAgICBjb25zdCBpbnB1dFRhcmdldCA9IHRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGNvbnN0IGxpbmtUYXJnZXQgPSB0YXJnZXQgYXMgSFRNTExpbmtFbGVtZW50O1xuXG4gICAgY29uc3QgY29tcG9uZW50SW5mbyA9IGdldENvbXBvbmVudEluZm8ocmVhY3RDb21wb25lbnQsIDEwLCBbXSk7XG5cbiAgICAvLyBmaW5kIHRoZSBjbG9zZXN0IGNsaWNrIGhhbmRsZXIgdGhhdCB3b3VsZCBoYXZlIGJlZW4gdHJpZ2dlcmVkXG4gICAgLy8gbm90ZSwgc2xpY2UoMCkgY29waWVzIHRoZSBhcnJheVxuICAgIGNvbnN0IGNsaWNrSGFuZGxlciA9IGNvbXBvbmVudEluZm8/LnNsaWNlKDApPy5yZXZlcnNlKCk/LnJlZHVjZShmaW5kQ2xpY2tIYW5kbGVyLCBudWxsKTtcblxuXG4gICAgLy8gY29uc29sZS5sb2coJ2NvbXBvbmVudCBpbmZvIGluIEdFVF9NRVNTQUdFOiAnLCBjb21wb25lbnRJbmZvLCBjbGlja0hhbmRsZXIpXG5cbiAgICBjb25zdCBtZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgICAgLy8gY29tcG9uZW50TmFtZSwgZmlsZU5hbWUsIGFuZCBsaW5lTnVtYmVyIGFyZSBhbHJlYWR5IGluIHRoZSBvYmplY3QgcmV0dXJuZWRcbiAgICAgIGFjdGlvbjogZXZlbnQudHlwZSxcbiAgICAgIGNoZWNrZWQ6IGV2ZW50Py50YXJnZXQ/Lmhhc093blByb3BlcnR5KFwiY2hlY2tlZFwiKVxuICAgICAgICA/IGlucHV0VGFyZ2V0LmNoZWNrZWRcbiAgICAgICAgOiBudWxsLFxuICAgICAgY29vcmRpbmF0ZXM6IGdldENvb3JkaW5hdGVzKGV2ZW50KSxcbiAgICAgIGhyZWY6IGxpbmtUYXJnZXQuaHJlZiA/IGxpbmtUYXJnZXQuaHJlZiA6IG51bGwsXG4gICAgICBrZXlDb2RlOiAoZXZlbnQgYXMgS2V5Ym9hcmRFdmVudCkua2V5Q29kZVxuICAgICAgICA/IChldmVudCBhcyBLZXlib2FyZEV2ZW50KS5rZXlDb2RlXG4gICAgICAgIDogbnVsbCxcbiAgICAgIHRhZ05hbWU6IGlucHV0VGFyZ2V0LnRhZ05hbWUsXG4gICAgICB0YWdUeXBlOiBpbnB1dFRhcmdldC50eXBlLFxuICAgICAgdGV4dENvbnRlbnQ6IGlucHV0VGFyZ2V0LnRleHRDb250ZW50IHx8IGlucHV0VGFyZ2V0LmlubmVyVGV4dCxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICB2YWx1ZTogaW5wdXRUYXJnZXQudmFsdWUsXG4gICAgICB3cml0ZVRlc3RMb2NhdGlvbjogJycsXG4gICAgICBjb21wb25lbnRJbmZvOiBjb21wb25lbnRJbmZvLFxuICAgICAgY2xpY2tIYW5kbGVyQ29tcG9uZW50OiBjbGlja0hhbmRsZXJcblxuICAgIH07XG5cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfTtcblxuXG4gIHJlY29yZEV2ZW50ID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgIGNvbnN0IG5vZGVUYXJnZXQgPSBldmVudC50YXJnZXQgYXMgTm9kZTtcbiAgICBjb25zdCBtb3VzZUV2ZW50ID0gZXZlbnQgYXMgTW91c2VFdmVudDtcblxuICAgIC8vIGlmIHRoZSBjbGljayBpcyBvbiBhIG1lbnUgdGhhdCBwb3BzIHVwLCBkb250IGdvIHRocm91Z2ggdGhlIHJlY29yZCBldmVudCBsb2dpY1xuICAgIGlmIChub2RlVGFyZ2V0Py5wYXJlbnRFbGVtZW50Py5nZXRBdHRyaWJ1dGUoXCJpZFwiKT8uaW5jbHVkZXMoJ2NvbXBvbmVudE1lbnUnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWV2ZW50LnRhcmdldCkgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLnByZXZpb3VzTXNnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoZXZlbnQudHlwZSA9PT0gXCJjaGFuZ2VcIiB8fCBldmVudC50eXBlID09PSBcImNsaWNrXCIpICYmXG4gICAgICAgICAgdGhpcy5wcmV2aW91c01zZyAmJlxuICAgICAgICAgIHRoaXMucHJldmlvdXNNc2cuYWN0aW9uID09PSBcImNsaWNrXCIgJiZcbiAgICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMucHJldmlvdXNNc2cudGltZXN0YW1wIDwgMTAwXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwibWVzc2FnZSBub3Qgc2VuZCBkdWUgdG8gdGltZVwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVhY3RDb21wb25lbnQgPSBmaW5kUmVhY3RFbGVtZW50KGV2ZW50LnRhcmdldCk7XG4gICAgICBjb25zdCBtc2c6IE1lc3NhZ2UgPSB0aGlzLmdldE1lc3NhZ2UocmVhY3RDb21wb25lbnQsIGV2ZW50KTtcbiAgICAgIGNvbnNvbGUubG9nKCdyZWFjdENvbXBvbmVudCBhbmQgbWVzc2FnZSBpbiBSRUNPUkRfRVZFTlQ6ICcsIHJlYWN0Q29tcG9uZW50LCBtc2cpO1xuXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImxhc3RFdmVudFwiLCBKU09OLnN0cmluZ2lmeShtc2cpKTtcbiAgICAgIHRoaXMucHJldmlvdXNNc2cgPSBtc2c7XG5cbiAgICAgIC8vIGlmIChcbiAgICAgIC8vICAgLy8gaWYgdGhlcmUgaXMgbm8gcHJldmlvdXMgY29tcG9uZW50IG9yIHRoZSBwcmV2aW91cyBjb21wb25lbnQgaXMgdGhlIHNhbWUgYXMgdGhlIGNvbXBvbmVudCB5b3UganVzdCBjbGlja2VkIG9uXG4gICAgICAvLyAgICF0aGlzLnByZXZpb3VzQ29tcG9uZW50IHx8XG4gICAgICAvLyAgICh0aGlzLnByZXZpb3VzQ29tcG9uZW50ICYmIHRoaXMucHJldmlvdXNDb21wb25lbnQgPT09IHJlYWN0Q29tcG9uZW50KVxuICAgICAgLy8gKSB7XG4gICAgICAvLyAgIHRoaXMucHJldmlvdXNDb21wb25lbnQgPSByZWFjdENvbXBvbmVudDtcbiAgICAgIC8vICAgaWYgKFxuICAgICAgLy8gICAgIHRoaXMucHJldmlvdXNDb21wb25lbnQgJiZcbiAgICAgIC8vICAgICBtc2cuY2hlY2tlZCAhPT0gbnVsbCAmJlxuICAgICAgLy8gICAgIG1zZy5hY3Rpb24gPT09IFwiY2xpY2tcIlxuICAgICAgLy8gICApIHtcbiAgICAgIC8vICAgICAvLyBtZXNzYWdlIGlzIHNlbnQgd2hlbiBzb21ldGhpbmcgaW4gdGhlIHBvcHVwIG1lbnUgaXMgc2VsZWN0ZWRcbiAgICAgIC8vICAgICB0aGlzLmNyZWF0ZVBvcHVwTWVudShtc2cpO1xuICAgICAgLy8gICAgIC8vIHRoaXMuc2VuZEV2ZW50KG1zZyk7XG4gICAgICAvLyAgICAgcmV0dXJuO1xuICAgICAgLy8gICB9XG5cbiAgICAgIC8vICAgLy9wdXNoaW5nIGEgbWVzc2FnZSB0byB0aGUgZXZlbnQgY2FjaGUgc2VuZHMgaXQgdG8gdGhlIGFwaSB3aGVuIHRoZSByZWNvbmNpbGUgY2FsbGJhY2sgaXMgY2FsbGVkXG4gICAgICAvLyAgIHRoaXMuY29tcG9uZW50RXZlbnRDYWNoZS5wdXNoKG1zZyk7XG5cbiAgICAgIC8vICAgcmV0dXJuO1xuICAgICAgLy8gfSBlbHNlIHtcbiAgICAgIC8vICAgdGhpcy5jbGVhckV2ZW50Q2FjaGUoKTtcbiAgICAgIC8vIH1cblxuICAgICAgdGhpcy5wcmV2aW91c0NvbXBvbmVudCA9IHJlYWN0Q29tcG9uZW50O1xuXG4gICAgICAvLyBtZXNzYWdlIGlzIHNlbnQgd2hlbiBzb21ldGhpbmcgaW4gdGhlIHBvcHVwIG1lbnUgaXMgc2VsZWN0ZWRcbiAgICAgIGlmIChtb3VzZUV2ZW50Py5tZXRhS2V5KSB0aGlzLmNyZWF0ZVBvcHVwTWVudShtc2csIG1vdXNlRXZlbnQpO1xuICAgICAgLy8gdGhpcy5zZW5kRXZlbnQobXNnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcmVjb3JkaW5nIGV2ZW50XCIsIGUpO1xuICAgIH1cbiAgfTtcblxuICBjcmVhdGVOZXdUZXN0ID0gYXN5bmMgKG1lc3NhZ2U6IE1lc3NhZ2UpID0+IHtcbiAgICBsZXQgYWNjb3VudElkID0gKHdpbmRvdyBhcyB7IFtrZXk6IHN0cmluZ106IGFueSB9KVtcImRhdGFMYXllclwiXVswXVtcImFwaUtleVwiXTtcblxuICAgIC8vIHJhdGhlciBnZXQgYSA0MDMgdGhhbiBhIGJhZCByb3V0ZVxuICAgIGlmICghYWNjb3VudElkKSB7XG4gICAgICBhY2NvdW50SWQgPSAxO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IGAvL2xvY2FsaG9zdDozMDIwL2FwaS9hY2NvdW50cy8ke2FjY291bnRJZH0vZXZlbnRzL2A7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIG1vZGU6IFwiY29yc1wiLFxuICAgICAgY2FjaGU6IFwibm8tY2FjaGVcIixcbiAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgZXZlbnQ6IG1lc3NhZ2UsXG4gICAgICAgIC8vIFRPRE86IHRlc3Qgc2V0IGlkIHNob3VsZCBiZSBzZXQgd2hlbiBjcmVhdGluZy9sb2FkaW5nIHRlc3RzZXQgaW4gdGhlIHJ1bm5lclxuICAgICAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICB9O1xuXG4gIGNoZWNrRm9yRXhpc3RpbmdUZXN0ID0gYXN5bmMgKGZpbGVwYXRoOiBzdHJpbmcpID0+IHtcbiAgICBsZXQgYWNjb3VudElkID0gKHdpbmRvdyBhcyB7IFtrZXk6IHN0cmluZ106IGFueSB9KVtcImRhdGFMYXllclwiXVswXVtcImFwaUtleVwiXTtcblxuICAgIC8vIHJhdGhlciBnZXQgYSA0MDMgdGhhbiBhIGJhZCByb3V0ZVxuICAgIGlmICghYWNjb3VudElkKSB7XG4gICAgICBhY2NvdW50SWQgPSAxO1xuICAgIH1cblxuICAgIGNvbnN0IHVyaUZpbGVwYXRoID0gZW5jb2RlVVJJKGZpbGVwYXRoKVxuICAgIGNvbnN0IHVybCA9IGAvL2xvY2FsaG9zdDozMDIwL2FwaS9hY2NvdW50cy8ke2FjY291bnRJZH0vZXZlbnRzLz9maWxlcGF0aD0ke3VyaUZpbGVwYXRofWA7XG5cbiAgICBjb25zb2xlLmxvZygndXJsIGhpdDogJywgdXJsLCB1cmlGaWxlcGF0aClcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgICBjYWNoZTogXCJuby1jYWNoZVwiLFxuICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gIH07XG59XG5cbig8YW55PndpbmRvdykuZXZlbnRSZWNvcmRlciA9IG5ldyBBc3NlcnRseUNsaWVudCgpO1xuKDxhbnk+d2luZG93KS5ldmVudFJlY29yZGVyLnN0YXJ0KCk7XG5cbiIsImltcG9ydCBDb29yZGluYXRlcyBmcm9tIFwiLi90eXBlcy9Db29yZGluYXRlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29tcG9uZW50SW5mbyhjb21wb25lbnQ6IGFueSwgbWF4TmVzdDogbnVtYmVyLCByZXN1bHRBcnJheTogYW55KTogYW55IHtcbiAgY29uc29sZS5sb2coJ2dldENvbXBvbmVudEluZm86ICcsIGNvbXBvbmVudCwgcmVzdWx0QXJyYXkpXG5cbiAgaWYgKCFjb21wb25lbnQgfHwgbWF4TmVzdCA9PT0gMCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdyZXN1bHRBcnJheTogJywgcmVzdWx0QXJyYXkpXG4gICAgcmV0dXJuIHJlc3VsdEFycmF5XG4gIH1cblxuICBpZiAoY29tcG9uZW50Py5fZGVidWdTb3VyY2U/LmZpbGVOYW1lKSB7XG4gICAgLy8gdGhlIG93bmVyIG9mIHRoZSBub2RlIHdoZXJlIHRoZSAnc291cmNlJyBmaWxlbmFtZSBleGlzdHMgaXMgdGhlIGZpbGUgdGhhdCB5b3Ugd2FudCB0aGUgcHJvcHMgZm9yIFxuICAgIGNvbnN0IHByb3BzID0gZ2V0Q29tcG9uZW50UHJvcHMoY29tcG9uZW50Py5fZGVidWdPd25lcilcbiAgICBjb25zdCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQ/Ll9kZWJ1Z093bmVyKVxuICAgIHJlc3VsdEFycmF5LnB1c2goe1xuICAgICAgZmlsZW5hbWU6IGNvbXBvbmVudD8uX2RlYnVnU291cmNlPy5maWxlTmFtZSwgXG4gICAgICAvLyB0aGUgbGluZSBudW1iZXIgaXMgcmVhbGx5IGZvciB0aGUgbmV4dCBjb21wb25lbnQgZG93biBpbiB0aGUgdHJlZSB0aGF0IGlzIGJlaW5nIGNhbGxlZCBmcm9tIHRoZSAnZmlsZW5hbWUnXG4gICAgICBsaW5lbnVtYmVyOiBjb21wb25lbnQ/Ll9kZWJ1Z1NvdXJjZT8ubGluZU51bWJlciwgXG4gICAgICBwcm9wczogcHJvcHMsIFxuICAgICAgLy8gaWYgaXQncyBjb21wb25lbnQgIHN0ci5zcGxpdCgnXFxcXCcpLnBvcC5zcGxpdChgL2ApLnBvcCgpLnNwbGl0KCcuJylbMF1cbiAgICAgIGNvbXBvbmVudE5hbWU6IG5hbWUgPT09ICdDb21wb25lbnQnID8gXG4gICAgICAgIGNvbXBvbmVudD8uX2RlYnVnU291cmNlPy5maWxlTmFtZT8uc3BsaXQoJ1xcXFwnKS5wb3AoKS5zcGxpdChgL2ApLnBvcCgpLnNwbGl0KCcuJylbMF0gOiBuYW1lXG4gICAgfSlcbiAgICByZXR1cm4gZ2V0Q29tcG9uZW50SW5mbyhjb21wb25lbnQ/Ll9kZWJ1Z093bmVyLG1heE5lc3QtMSxyZXN1bHRBcnJheSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0Q29tcG9uZW50SW5mbyhjb21wb25lbnQ/Ll9kZWJ1Z093bmVyLG1heE5lc3QtMSxyZXN1bHRBcnJheSlcbiAgfVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnRQcm9wcyhjb21wb25lbnQ6IGFueSwgcHJvcHMgPSB7fSk6IGFueSB7XG4gIGlmICghY29tcG9uZW50KSB7XG4gICAgZnVuY3Rpb25TdHJpbmdpZnkocHJvcHMpO1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuXG4gIGNvbnN0IG5ld1Byb3BzID0gY29tcG9uZW50LnBlbmRpbmdQcm9wc1xuICAgID8geyAuLi5wcm9wcywgLi4uY29tcG9uZW50LnBlbmRpbmdQcm9wcyB9XG4gICAgOiBwcm9wcztcbiAgZGVsZXRlIG5ld1Byb3BzLmNoaWxkcmVuO1xuXG4gIGlmIChcbiAgICBjb21wb25lbnQ/LnR5cGU/Ll9fcHJvdG9fXyAmJlxuICAgIFtcIkNvbXBvbmVudFwiLCBcIlB1cmVDb21wb25lbnRcIl0uaW5jbHVkZXMoY29tcG9uZW50LnR5cGUuX19wcm90b19fLm5hbWUpXG4gICkge1xuICAgIGZ1bmN0aW9uU3RyaW5naWZ5KG5ld1Byb3BzKTtcbiAgICByZXR1cm4gbmV3UHJvcHM7XG4gIH1cblxuICByZXR1cm4gZ2V0Q29tcG9uZW50UHJvcHMoY29tcG9uZW50Ll9kZWJ1Z093bmVyLCBuZXdQcm9wcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKGZpYmVyOiBhbnkpOiBhbnkge1xuICBpZiAoIWZpYmVyKSByZXR1cm4gbnVsbDtcblxuICBpZiAoZmliZXIuZWxlbWVudFR5cGUgJiYgZmliZXIuZWxlbWVudFR5cGUubmFtZSkge1xuICAgIHJldHVybiBmaWJlci5lbGVtZW50VHlwZS5uYW1lO1xuICB9XG5cbiAgaWYgKGZpYmVyLmVsZW1lbnRUeXBlICYmIGZpYmVyLmVsZW1lbnRUeXBlLmRpc3BsYXlOYW1lKSB7XG4gICAgcmV0dXJuIGZpYmVyLmVsZW1lbnRUeXBlLmRpc3BsYXlOYW1lO1xuICB9XG5cbiAgaWYgKGZpYmVyLnR5cGUuZGlzcGxheU5hbWUpIHtcbiAgICByZXR1cm4gZmliZXIudHlwZS5kaXNwbGF5TmFtZTtcbiAgfVxuXG4gIGlmIChmaWJlci50eXBlLm5hbWUpIHtcbiAgICByZXR1cm4gZmliZXIudHlwZS5uYW1lO1xuICB9XG4gIHJldHVybiBnZXRDb21wb25lbnROYW1lKGZpYmVyLl9kZWJ1Z093bmVyKTtcbn1cblxuY29uc3QgZXZlbnRzV2l0aENvb3JkaW5hdGVzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge1xuICBtb3VzZXVwOiB0cnVlLFxuICBtb3VzZWRvd246IHRydWUsXG4gIG1vdXNlbW92ZTogdHJ1ZSxcbiAgbW91c2VvdmVyOiB0cnVlLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvb3JkaW5hdGVzKGV2ZW50OiBFdmVudCk6IENvb3JkaW5hdGVzIHwgbnVsbCB7XG4gIGNvbnN0IG1vdXNlRXZlbnQgPSBldmVudCBhcyBNb3VzZUV2ZW50O1xuXG4gIHJldHVybiBldmVudHNXaXRoQ29vcmRpbmF0ZXNbZXZlbnQudHlwZV1cbiAgICA/IHsgeDogbW91c2VFdmVudC5jbGllbnRYLCB5OiBtb3VzZUV2ZW50LmNsaWVudFkgfVxuICAgIDogbnVsbDtcbn1cblxuLy8gbWFwIHJlYWN0IGNsYXNzZXMgdG8gZG9tIGVsZW1lbnRzXG5leHBvcnQgZnVuY3Rpb24gZmluZFJlYWN0RWxlbWVudERVUktBKHRhcmdldDogRXZlbnRUYXJnZXQpOiBhbnkge1xuICAvLyBjb25zb2xlLmRpcih0YXJnZXQpXG4gIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKHRhcmdldCkuZmluZCgoa2V5KSA9PlxuICAgIGtleS5zdGFydHNXaXRoKFwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIpXG4gICk7XG4gIC8vIGNvbnNvbGUubG9nKCdrZXk6ICcsIGtleSlcbiAgLy8gY3JlYXRlcyBhbiBvYmplY3Qgb3V0IG9mIHRoZSB0YXJnZXQgcGFzc2VkXG4gIGNvbnN0IHRhcmdldE1hcCA9IHRhcmdldCBhcyB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuXG4gIGNvbnN0IGludGVybmFsSW5zdGFuY2UgPSBrZXkgPyB0YXJnZXRNYXBba2V5XSA6IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdSZWFjdCBOb2RlIGlmIEZvdW5kOiAnLCBpbnRlcm5hbEluc3RhbmNlKVxuICBpZiAoaW50ZXJuYWxJbnN0YW5jZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcblxuICAvLyBjb25zb2xlLmxvZygnaW50ZXJuYWxJbnN0YW5jZTI6ICcsIGludGVybmFsSW5zdGFuY2UpXG4gIC8vIHJldHVybiBpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z093bmVyXG4gIC8vICAgPyBpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z093bmVyLnN0YXRlTm9kZVxuICAvLyAgIDogaW50ZXJuYWxJbnN0YW5jZS5yZXR1cm4uc3RhdGVOb2RlO1xuXG4gIHJldHVybiBpbnRlcm5hbEluc3RhbmNlO1xuXG4gIC8vIGZvciAobGV0IGtleTogc3RyaW5nIGluIHRhcmdldCkge1xuICAvLyAgIGlmIChrZXkuc3RhcnRzV2l0aChcIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiKSkge1xuICAvLyAgICAgLy8gY29uc29sZS5sb2coJ2tleXMgaW4gdGhlIGZpbmQgUmVhY3RFbGVtZW50JywgdGFyZ2V0W2tleV0pXG4gIC8vICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gIC8vICAgfVxuICAvLyB9XG4gIC8vIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFJlYWN0RWxlbWVudCh0YXJnZXQ6IEV2ZW50VGFyZ2V0KTogYW55IHtcbiAgLy8gY29uc3Qga2V5ID0gT2JqZWN0LmtleXModGFyZ2V0KS5maW5kKChrZXkpID0+XG4gIC8vICAga2V5LnN0YXJ0c1dpdGgoXCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIilcbiAgLy8gKTtcbiAgY29uc3QgdGFyZ2V0TWFwID0gdGFyZ2V0IGFzIHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gIC8vIGNvbnN0IGludGVybmFsSW5zdGFuY2UgPSBrZXkgPyB0YXJnZXRNYXBba2V5XSA6IG51bGw7XG4gIC8vIGlmIChpbnRlcm5hbEluc3RhbmNlID09IG51bGwpIHJldHVybiBudWxsO1xuICAvLyByZXR1cm4gaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdPd25lclxuICAvLyAgID8gaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdPd25lci5zdGF0ZU5vZGVcbiAgLy8gICA6IGludGVybmFsSW5zdGFuY2UucmV0dXJuLnN0YXRlTm9kZTtcbiAgZm9yIChsZXQga2V5IGluIHRhcmdldE1hcCkge1xuICAgIGlmIChrZXkuc3RhcnRzV2l0aChcIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2tleXMgaW4gdGhlIGZpbmQgUmVhY3RFbGVtZW50JywgdGFyZ2V0W2tleV0pXG4gICAgICByZXR1cm4gdGFyZ2V0TWFwW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBmdW5jdGlvblN0cmluZ2lmeShvYmo6IGFueSk6IHZvaWQge1xuICBmb3IgKGxldCBrIGluIG9iaikge1xuICAgIGlmIChvYmpba10gJiYge30udG9TdHJpbmcuY2FsbChvYmpba10pID09PSBcIltvYmplY3QgRnVuY3Rpb25dXCIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIG9ialtrXSA9IFwiXCIgKyBvYmpba107XG4gICAgICAgIC8vIC8vIGdldCByaWQgb2YgdGhlIGV4dHJhIGxpbmUgbWFya2Vyc1xuICAgICAgICAvLyBvYmpba10gPSBvYmpba10ucmVwbGFjZSgvKFxcclxcbnxcXG58XFxyKS9nbSwgXCJcIik7XG4gICAgICAgIG9ialtrXSA9IFwiW0Z1bmN0aW9uXVwiXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzdHJpbmdpZnlpbmcgcHJvcFwiLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3RyaXBFeHRyYUNvbXBvbmVudFByb3BzKG9iaik7XG59XG5cblxuXG5mdW5jdGlvbiBzdHJpcEV4dHJhQ29tcG9uZW50UHJvcHMocHJvcHM6IGFueSk6IHZvaWQge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKFxuICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb3BzW2tleV0pID09PSBcIltvYmplY3QgT2JqZWN0XVwiICYmXG4gICAgICAocHJvcHNba2V5XS5oYXNPd25Qcm9wZXJ0eShcIl9vd25lclwiKSB8fFxuICAgICAgICBrZXkgPT09IFwiaW5wdXRSZWZcIiB8fFxuICAgICAgICBrZXkgPT09IFwiSW5wdXRQcm9wc1wiKVxuICAgICkge1xuICAgICAgZGVsZXRlIHByb3BzW2tleV07XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudFR5cGUsIFJlY29uY2lsZVR5cGUgfSBmcm9tIFwiLi90eXBlcy9FdmVudFR5cGVcIjtcbmltcG9ydCB7IFJlY29yZGVyQ29uZmlnIH0gZnJvbSBcIi4vdHlwZXMvUmVjb3JkZXJDb25maWdcIjtcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICByZWNvcmRlckFkZGVkQ29udHJvbExpc3RlbmVyczogYm9vbGVhbjtcbiAgICBkYXRhTGF5ZXI6IGFueVtdO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50UmVjb3JkZXIge1xuICBwcml2YXRlIGV2ZW50Q2FsbGJhY2s6IChldmVudDogRXZlbnQpID0+IGFueTtcbiAgcHJpdmF0ZSByZWNvbmNpbGVDYWxsYmFjazogKGV2ZW50OiBFdmVudCkgPT4gYW55O1xuICBwcml2YXRlIHJlY29yZEV2ZW50czogRXZlbnRUeXBlW10gPSBbXTtcbiAgcHJpdmF0ZSByZWNvbmNpbGVFdmVudHM6IFJlY29uY2lsZVR5cGVbXSA9IFtcImJsdXJcIiwgXCJmb2N1c1wiLCBcImNoYW5nZVwiXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFJlY29yZGVyQ29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgZXZlbnRDYWxsYmFjayxcbiAgICAgIHJlY29uY2lsZUNhbGxiYWNrLFxuICAgICAgcmVjb3JkRXZlbnRzLFxuICAgICAgcmVjb25jaWxlRXZlbnRzID0gbnVsbCxcbiAgICB9ID0gY29uZmlnO1xuICAgIHRoaXMuZXZlbnRDYWxsYmFjayA9IGV2ZW50Q2FsbGJhY2s7XG4gICAgdGhpcy5yZWNvbmNpbGVDYWxsYmFjayA9IHJlY29uY2lsZUNhbGxiYWNrO1xuICAgIHRoaXMucmVjb3JkRXZlbnRzID0gcmVjb3JkRXZlbnRzO1xuICAgIGlmIChyZWNvbmNpbGVFdmVudHMpIHtcbiAgICAgIHRoaXMucmVjb25jaWxlRXZlbnRzID0gcmVjb25jaWxlRXZlbnRzO1xuICAgIH1cbiAgfVxuXG4gIGFkZEFsbExpc3RlbmVycyA9ICgpID0+IHtcbiAgICB0aGlzLnJlY29yZEV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuZXZlbnRDYWxsYmFjaywgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlY29uY2lsZUV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMucmVjb25jaWxlQ2FsbGJhY2ssIHRydWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJlbW92ZUFsbExpc3RlbmVycyA9ICgpID0+IHtcbiAgICB0aGlzLnJlY29yZEV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuZXZlbnRDYWxsYmFjaywgdHJ1ZSk7XG4gICAgfSk7XG4gICAgdGhpcy5yZWNvbmNpbGVFdmVudHMuZm9yRWFjaCgoZXZlbnQ6IFJlY29uY2lsZVR5cGUpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLnJlY29uY2lsZUNhbGxiYWNrLCB0cnVlKTtcbiAgICB9KTtcbiAgfTtcblxuICBzdGFydCA9ICgpID0+IHtcbiAgICBpZiAoIXdpbmRvdy5yZWNvcmRlckFkZGVkQ29udHJvbExpc3RlbmVycykge1xuICAgICAgdGhpcy5hZGRBbGxMaXN0ZW5lcnMoKTtcbiAgICAgIHdpbmRvdy5yZWNvcmRlckFkZGVkQ29udHJvbExpc3RlbmVycyA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIHN0b3AgPSAoKSA9PiB7XG4gICAgaWYgKHdpbmRvdy5yZWNvcmRlckFkZGVkQ29udHJvbExpc3RlbmVycykge1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgIHdpbmRvdy5yZWNvcmRlckFkZGVkQ29udHJvbExpc3RlbmVycyA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=