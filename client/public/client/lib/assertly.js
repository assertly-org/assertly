!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t){var n,r,i;return e&&0!==t?(null===(n=null==e?void 0:e._debugSource)||void 0===n?void 0:n.fileName)?{filename:null===(r=null==e?void 0:e._debugSource)||void 0===r?void 0:r.fileName,linenumber:null===(i=null==e?void 0:e._debugSource)||void 0===i?void 0:i.lineNumber}:o(null==e?void 0:e._debugOwner,t-1):null}function r(e){return e?e.elementType&&e.elementType.name?e.elementType.name:e.elementType&&e.elementType.displayName?e.elementType.displayName:e.type.displayName?e.type.displayName:e.type.name?e.type.name:r(e._debugOwner):null}n.r(t),n.d(t,"default",(function(){return u}));const i={mouseup:!0,mousedown:!0,mousemove:!0,mouseover:!0};function s(e){const t=e;return i[e.type]?{x:t.clientX,y:t.clientY}:null}function c(e){const t=Object.keys(e).find(e=>e.startsWith("__reactInternalInstance$")),n=t?e[t]:null;return console.log("React Node if Found: ",n),null==n?null:n}function l(e){for(let t in e)if(e[t]&&"[object Function]"==={}.toString.call(e[t]))try{e[t]=""+e[t]}catch(e){console.error("Error stringifying prop",e)}!function(e){const t=Object.keys(e);for(const n of t)"[object Object]"!==Object.prototype.toString.call(e[n])||!e[n].hasOwnProperty("_owner")&&"inputRef"!==n&&"InputProps"!==n||delete e[n]}(e)}class a{constructor(e){this.recordEvents=[],this.reconcileEvents=["blur","focus","change"],this.addAllListeners=()=>{this.recordEvents.forEach(e=>{window.addEventListener(e,this.eventCallback,!0)}),this.reconcileEvents.forEach(e=>{window.addEventListener(e,this.reconcileCallback,!0)})},this.removeAllListeners=()=>{this.recordEvents.forEach(e=>{window.removeEventListener(e,this.eventCallback,!0)}),this.reconcileEvents.forEach(e=>{window.removeEventListener(e,this.reconcileCallback,!0)})},this.start=()=>{window.recorderAddedControlListeners||(this.addAllListeners(),window.recorderAddedControlListeners=!0)},this.stop=()=>{window.recorderAddedControlListeners&&(this.removeAllListeners(),window.recorderAddedControlListeners=!1)};const{eventCallback:t,reconcileCallback:n,recordEvents:o,reconcileEvents:r=null}=e;this.eventCallback=t,this.reconcileCallback=n,this.recordEvents=o,r&&(this.reconcileEvents=r)}}var d=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function c(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,c)}l((o=o.apply(e,t||[])).next())}))};class u{constructor(){this.eventsToRecord=["click","change"],this.componentEventCache=[],this.previousComponent=null,this.previousMsg=null,this.start=()=>{this.eventRecorder.start()},this.stop=()=>{this.eventRecorder.stop()},this.clearEventCache=()=>{this.componentEventCache=[]},this.reconcileEventCache=e=>{(e.target?c(e.target):null)!==this.previousComponent&&(this.componentEventCache.forEach(e=>{this.sendEvent(e)}),this.clearEventCache())},this.getMessage=(e,t)=>{var n,i,c;const a=t.target||t.srcElement,d=a,u=a,v=function e(t,n={}){var o;if(!t)return l(n),n;const r=t.pendingProps?Object.assign(Object.assign({},n),t.pendingProps):n;return delete r.children,(null===(o=null==t?void 0:t.type)||void 0===o?void 0:o.__proto__)&&["Component","PureComponent"].includes(t.type.__proto__.name)?(l(r),r):e(t._debugOwner,r)}(e);return{action:t.type,checked:(null===(n=null==t?void 0:t.target)||void 0===n?void 0:n.hasOwnProperty("checked"))?d.checked:null,componentName:r(null==e?void 0:e._debugOwner),coordinates:s(t),filename:null===(i=o(e,10))||void 0===i?void 0:i.filename,linenumber:null===(c=o(e,10))||void 0===c?void 0:c.linenumber,href:u.href?u.href:null,keyCode:t.keyCode?t.keyCode:null,props:v,tagName:d.tagName,tagType:d.type,textContent:d.textContent||d.innerText,timestamp:(new Date).getTime(),value:d.value}},this.recordEvent=e=>{const t=e.target;if((!this.previousMsg||this.previousMsg.timestamp!==e.timeStamp)&&("load"!==e.type||"#document"!==t.nodeName)&&e.target)try{if(this.previousMsg&&("change"===e.type||"click"===e.type)&&this.previousMsg&&"click"===this.previousMsg.action&&(new Date).getTime()-this.previousMsg.timestamp<100)return void console.log("message not send due to time");const t=c(e.target);console.log("reactComponent: ",t);const n=this.getMessage(t,e);if(console.log("record event msg",n),localStorage.setItem("lastEvent",JSON.stringify(n)),this.previousMsg=n,!this.previousComponent||this.previousComponent&&this.previousComponent===t)return this.previousComponent=t,this.previousComponent&&null!==n.checked&&"click"===n.action?void this.sendEvent(n):void this.componentEventCache.push(n);this.clearEventCache(),this.previousComponent=t,this.sendEvent(n)}catch(e){console.error("Error recording event",e)}},this.sendEvent=e=>d(this,void 0,void 0,(function*(){const t=`//localhost:3002/api/accounts/${window.dataLayer[0].apiKey}/events/`;yield fetch(t,{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:window.location.href,event:[e],testSetId:"60652b19-98f3-40b4-88f7-88c71dbc788a"})})})),this.eventRecorder=new a({recordEvents:this.eventsToRecord,eventCallback:this.recordEvent,reconcileCallback:this.reconcileEventCache})}}window.eventRecorder=new u,window.eventRecorder.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,