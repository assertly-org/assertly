!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t,n){var l,c,s;if(!e||0===t)return n;if(null===(l=null==e?void 0:e._debugSource)||void 0===l?void 0:l.fileName){const l=r(null==e?void 0:e._debugOwner),a=i(null==e?void 0:e._debugOwner);return n.push({filename:null===(c=null==e?void 0:e._debugSource)||void 0===c?void 0:c.fileName,linenumber:null===(s=null==e?void 0:e._debugSource)||void 0===s?void 0:s.lineNumber,props:l,componentName:a}),o(null==e?void 0:e._debugOwner,t-1,n)}return o(null==e?void 0:e._debugOwner,t-1,n)}function r(e,t={}){var n;if(!e)return a(t),t;const o=e.pendingProps?Object.assign(Object.assign({},t),e.pendingProps):t;return delete o.children,(null===(n=null==e?void 0:e.type)||void 0===n?void 0:n.__proto__)&&["Component","PureComponent"].includes(e.type.__proto__.name)?(a(o),o):r(e._debugOwner,o)}function i(e){return e?e.elementType&&e.elementType.name?e.elementType.name:e.elementType&&e.elementType.displayName?e.elementType.displayName:e.type.displayName?e.type.displayName:e.type.name?e.type.name:i(e._debugOwner):null}n.r(t),n.d(t,"default",(function(){return v}));const l={mouseup:!0,mousedown:!0,mousemove:!0,mouseover:!0};function c(e){const t=e;return l[e.type]?{x:t.clientX,y:t.clientY}:null}function s(e){const t=Object.keys(e).find(e=>e.startsWith("__reactInternalInstance$")),n=t?e[t]:null;return console.log("React Node if Found: ",n),null==n?null:n}function a(e){for(let t in e)if(e[t]&&"[object Function]"==={}.toString.call(e[t]))try{e[t]="[Function]"}catch(e){console.error("Error stringifying prop",e)}!function(e){const t=Object.keys(e);for(const n of t)"[object Object]"!==Object.prototype.toString.call(e[n])||!e[n].hasOwnProperty("_owner")&&"inputRef"!==n&&"InputProps"!==n||delete e[n]}(e)}class d{constructor(e){this.recordEvents=[],this.reconcileEvents=["blur","focus","change"],this.addAllListeners=()=>{this.recordEvents.forEach(e=>{window.addEventListener(e,this.eventCallback,!0)}),this.reconcileEvents.forEach(e=>{window.addEventListener(e,this.reconcileCallback,!0)})},this.removeAllListeners=()=>{this.recordEvents.forEach(e=>{window.removeEventListener(e,this.eventCallback,!0)}),this.reconcileEvents.forEach(e=>{window.removeEventListener(e,this.reconcileCallback,!0)})},this.start=()=>{window.recorderAddedControlListeners||(this.addAllListeners(),window.recorderAddedControlListeners=!0)},this.stop=()=>{window.recorderAddedControlListeners&&(this.removeAllListeners(),window.recorderAddedControlListeners=!1)};const{eventCallback:t,reconcileCallback:n,recordEvents:o,reconcileEvents:r=null}=e;this.eventCallback=t,this.reconcileCallback=n,this.recordEvents=o,r&&(this.reconcileEvents=r)}}var u=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function l(e){try{s(o.next(e))}catch(e){i(e)}}function c(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(l,c)}s((o=o.apply(e,t||[])).next())}))};class v{constructor(){this.eventsToRecord=["click","change"],this.componentEventCache=[],this.previousComponent=null,this.previousMsg=null,this.start=()=>{this.eventRecorder.start()},this.stop=()=>{this.eventRecorder.stop()},this.clearEventCache=()=>{this.componentEventCache=[]},this.reconcileEventCache=e=>{(e.target?s(e.target):null)!==this.previousComponent&&(this.componentEventCache.forEach(e=>{this.sendEvent(e)}),this.clearEventCache())},this.getMessage=(e,t)=>{var n,l,s;const a=t.target||t.srcElement,d=a,u=a,v=r(e),p=o(e,10,[]);console.log("event in getMessage: ",t);const h="componentMenu"+(new Date).getTime(),m=t,f=document.createElement("DIV");f.setAttribute("id",h),document.body.appendChild(f),f.style.position="absolute",f.style.left=m.x+"px",f.style.top=m.y+"px",f.style.zIndex="5",p.map(e=>{const n=document.createElement("BUTTON");if(n.innerHTML=null==e?void 0:e.componentName,n.innerHTML){n.addEventListener("click",()=>this.componentMenuClick(t,h)),f.appendChild(n);const e=document.createElement("br");f.appendChild(e)}});o(e,10,[]).map(e=>{var n;return e.action=t.type,e.checked=(null===(n=null==t?void 0:t.target)||void 0===n?void 0:n.hasOwnProperty("checked"))?d.checked:null,e.coordinates=c(t),e.href=u.href?u.href:null,e.keyCode=t.keyCode?t.keyCode:null,e.tagName=d.tagName,e.tagType=d.type,e.textContent=d.textContent||d.innerText,e.timestamp=(new Date).getTime(),e.value=d.value,e.writeTestLocation="",e});return{action:t.type,checked:(null===(n=null==t?void 0:t.target)||void 0===n?void 0:n.hasOwnProperty("checked"))?d.checked:null,componentName:i(null==e?void 0:e._debugOwner),coordinates:c(t),filename:null===(l=o(e,10,[])[0])||void 0===l?void 0:l.filename,linenumber:null===(s=o(e,10,[])[0])||void 0===s?void 0:s.linenumber,href:u.href?u.href:null,keyCode:t.keyCode?t.keyCode:null,props:v,tagName:d.tagName,tagType:d.type,textContent:d.textContent||d.innerText,timestamp:(new Date).getTime(),value:d.value,writeTestLocation:""}},this.componentMenuClick=(e,t)=>{console.log("this is the click call back: ",e),null==e||e.stopPropagation();const n=document.getElementById(t);null==n||n.remove()},this.recordEvent=e=>{var t,n;const o=e.target;if(null===(n=null===(t=null==o?void 0:o.parentElement)||void 0===t?void 0:t.getAttribute("id"))||void 0===n?void 0:n.includes("componentMenu"))console.log("Menu click, no message sent");else if(e.target)try{if(this.previousMsg&&("change"===e.type||"click"===e.type)&&this.previousMsg&&"click"===this.previousMsg.action&&(new Date).getTime()-this.previousMsg.timestamp<100)return void console.log("message not send due to time");const t=s(e.target);console.log("reactComponent: ",t);const n=this.getMessage(t,e);console.log("record event msg",n),localStorage.setItem("lastEvent",JSON.stringify(n)),this.previousMsg=n}catch(e){console.error("Error recording event",e)}},this.sendEvent=e=>u(this,void 0,void 0,(function*(){const t=window.dataLayer[0].apiKey,n=window.dataLayer[0].testLocation,o=`//localhost:3002/api/accounts/${t}/events/`;console.log("this is the write location: ",n,t),e.writeTestLocation=n,yield fetch(o,{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:window.location.href,event:[e],placeholder:null})})})),this.eventRecorder=new d({recordEvents:this.eventsToRecord,eventCallback:this.recordEvent,reconcileCallback:this.reconcileEventCache})}}window.eventRecorder=new v,window.eventRecorder.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,