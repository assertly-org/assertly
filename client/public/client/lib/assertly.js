!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var n,t=1,o=arguments.length;t<o;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}).apply(this,arguments)},r=this&&this.__awaiter||function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function c(e){try{u(o.next(e))}catch(e){i(e)}}function l(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(c,l)}u((o=o.apply(e,n||[])).next())}))},i=this&&this.__generator||function(e,n){var t,o,r,i,c={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;c;)try{if(t=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,o=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!(r=c.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){c=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){c.label=i[1];break}if(6===i[0]&&c.label<r[1]){c.label=r[1],r=i;break}if(r&&c.label<r[2]){c.label=r[2],c.ops.push(i);break}r[2]&&c.ops.pop(),c.trys.pop();continue}i=n.call(e,c)}catch(e){i=[6,e],o=0}finally{t=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var l=t(1),u=c(t(2)),a=function(){var e=this;this.eventsToRecord=["click","change"],this.componentEventCache=[],this.previousComponent=null,this.previousMsg=null,this.start=function(){e.eventRecorder.start()},this.stop=function(){e.eventRecorder.stop()},this.clearEventCache=function(){e.componentEventCache=[]},this.reconcileEventCache=function(n){(n.target?l.findReactElement(n.target):null)!==e.previousComponent&&(e.componentEventCache.forEach((function(e){console.log("in the reconcile")})),e.clearEventCache())},this.removeMenusByClassname=function(e){var n=Array.from(document.getElementsByClassName(e));null==n||n.map((function(e){return e.remove()}))},this.removeSingleMenu=function(n){return r(e,void 0,void 0,(function(){var e;return i(this,(function(t){return null==(e=document.getElementById(n))||e.remove(),[2]}))}))},this.setupMenuDiv=function(e){var n="componentMenu"+(new Date).getTime(),t=document.createElement("DIV");return t.setAttribute("id",n),t.setAttribute("class","componentMenu"),document.body.appendChild(t),t.style.position="absolute",t.style.left=e.x+"px",t.style.top=e.y+"px",t.style.zIndex="9999999999999",n},this.appendButton=function(e,n,t){var o,r;void 0===t&&(t=void 0);var i=document.createElement("BUTTON");i.style.width="150px",i.innerHTML=n,t&&t.backgroundColor&&(i.style.backgroundColor=t.backgroundColor),null===(o=document.getElementById(e))||void 0===o||o.appendChild(i);var c=document.createElement("br");return null===(r=document.getElementById(e))||void 0===r||r.appendChild(c),i},this.createPopupMenu=function(n,t){var o,c=e.setupMenuDiv(t);null===(o=null==n?void 0:n.componentInfo)||void 0===o||o.map((function(t){var o,l,u=document.createElement("BUTTON");if(u.style.width="150px",u.innerHTML=null==t?void 0:t.componentName,u.innerHTML){u.addEventListener("click",(function(t){return r(e,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this.componentMenuClick(t,c,n)];case 1:return[2,e.sent()]}}))}))})),null===(o=document.getElementById(c))||void 0===o||o.appendChild(u);var a=document.createElement("br");null===(l=document.getElementById(c))||void 0===l||l.appendChild(a)}}))},this.createExistingTestMenu=function(n,t,c,l){return r(e,void 0,void 0,(function(){var e,u,a,s=this;return i(this,(function(d){return e=this.setupMenuDiv(n),null==(u=t.describeBlocks)||u.map((function(n){s.appendButton(e,n)})),(a=this.appendButton(e,"Create New Test")).addEventListener("click",(function(){return r(s,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this.createNewTest(o(o({},c),{componentInfo:l,checkedEvent:t.checkedEvent}))];case 1:return e.sent(),[2]}}))}))})),[2,{newTestBtn:a,existingTestMenuID:e}]}))}))},this.componentMenuClick=function(n,t,c){return r(e,void 0,void 0,(function(){var e,t,r;return i(this,(function(i){switch(i.label){case 0:return e=null===(r=c.componentInfo)||void 0===r?void 0:r.reduce((function(e,t){var r;return t.componentName===(null===(r=n.target)||void 0===r?void 0:r.innerHTML)?o({},t):e}),null),null==n||n.stopPropagation(),[4,this.checkForExistingTest(null==e?void 0:e.filename)];case 1:return(t=i.sent()).describeBlocks?[4,this.createExistingTestMenu(n,t,c,e)]:[3,3];case 2:return i.sent(),[3,5];case 3:return[4,this.createNewTest(o(o({},c),{componentInfo:e,checkedEvent:t.checkedEvent}))];case 4:i.sent(),console.log("New Test Created"),i.label=5;case 5:return[2]}}))}))},this.getMessage=function(e,n){var t,r,i,c=n.target||n.srcElement,u=c,a=c,s=l.getComponentInfo(e,10,[]),d=null===(r=null===(t=null==s?void 0:s.slice(0))||void 0===t?void 0:t.reverse())||void 0===r?void 0:r.reduce((function(e,n){var t;return(null===(t=n.props)||void 0===t?void 0:t.onClick)?o({},n):e}),null);return{action:n.type,checked:(null===(i=null==n?void 0:n.target)||void 0===i?void 0:i.hasOwnProperty("checked"))?u.checked:null,coordinates:l.getCoordinates(n),href:a.href?a.href:null,keyCode:n.keyCode?n.keyCode:null,tagName:u.tagName,tagType:u.type,textContent:u.textContent||u.innerText,timestamp:(new Date).getTime(),value:u.value,writeTestLocation:"",componentInfo:s,clickHandlerComponent:d,checkedEvent:void 0}},this.recordEvent=function(n){var t,o,r=n.target,i=n;if(e.removeMenusByClassname("componentMenu"),!(null===(o=null===(t=null==r?void 0:r.parentElement)||void 0===t?void 0:t.getAttribute("id"))||void 0===o?void 0:o.includes("componentMenu"))&&n.target)try{if(e.previousMsg&&("change"===n.type||"click"===n.type)&&e.previousMsg&&"click"===e.previousMsg.action&&(new Date).getTime()-e.previousMsg.timestamp<100)return void console.log("message not send due to time");var c=l.findReactElement(n.target),u=e.getMessage(c,n);localStorage.setItem("lastEvent",JSON.stringify(u)),e.previousMsg=u,e.previousComponent=c,(null==i?void 0:i.metaKey)&&e.createPopupMenu(u,i)}catch(e){console.error("Error recording event",e)}},this.createNewTest=function(n){return r(e,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return(e=window.dataLayer[0].apiKey)||(e=1),[4,fetch("//localhost:3020/api/accounts/"+e+"/events/",{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:window.location.href,event:n,placeholder:null})})];case 1:return[2,t.sent().json()]}}))}))},this.checkForExistingTest=function(n){return r(e,void 0,void 0,(function(){var e,t;return i(this,(function(o){switch(o.label){case 0:return(e=window.dataLayer[0].apiKey)||(e=1),t=encodeURI(n),[4,fetch("//localhost:3020/api/accounts/"+e+"/events/?filepath="+t,{method:"GET",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"}})];case 1:return[2,o.sent().json()]}}))}))},this.eventRecorder=new u.default({recordEvents:this.eventsToRecord,eventCallback:this.recordEvent,reconcileCallback:this.reconcileEventCache})};n.default=a,window.eventRecorder=new a,window.eventRecorder.start()},function(e,n,t){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var n,t=1,o=arguments.length;t<o;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e}).apply(this,arguments)};function r(e,n){var t;if(void 0===n&&(n={}),!e)return l(n),n;var i=e.pendingProps?o(o({},n),e.pendingProps):n;return delete i.children,(null===(t=null==e?void 0:e.type)||void 0===t?void 0:t.__proto__)&&["Component","PureComponent"].includes(e.type.__proto__.name)?(l(i),i):r(e._debugOwner,i)}function i(e){return e?e.elementType&&e.elementType.name?e.elementType.name:e.elementType&&e.elementType.displayName?e.elementType.displayName:e.type.displayName?e.type.displayName:e.type.name?e.type.name:i(e._debugOwner):null}Object.defineProperty(n,"__esModule",{value:!0}),n.functionStringify=n.findReactElement=n.findReactElementDURKA=n.getCoordinates=n.getComponentName=n.getComponentProps=n.getComponentInfo=void 0,n.getComponentInfo=function e(n,t,o){var c,l,u,a,s;if(console.log("getComponentInfo: ",n,o),!n||0===t)return o;if(null===(c=null==n?void 0:n._debugSource)||void 0===c?void 0:c.fileName){var d=r(null==n?void 0:n._debugOwner),v=i(null==n?void 0:n._debugOwner);return o.push({filename:null===(l=null==n?void 0:n._debugSource)||void 0===l?void 0:l.fileName,linenumber:null===(u=null==n?void 0:n._debugSource)||void 0===u?void 0:u.lineNumber,props:d,componentName:"Component"===v?null===(s=null===(a=null==n?void 0:n._debugSource)||void 0===a?void 0:a.fileName)||void 0===s?void 0:s.split("\\").pop().split("/").pop().split(".")[0]:v}),e(null==n?void 0:n._debugOwner,t-1,o)}return e(null==n?void 0:n._debugOwner,t-1,o)},n.getComponentProps=r,n.getComponentName=i;var c={mouseup:!0,mousedown:!0,mousemove:!0,mouseover:!0};function l(e){for(var n in e)if(e[n]&&"[object Function]"==={}.toString.call(e[n]))try{e[n]="[Function]"}catch(e){console.error("Error stringifying prop",e)}!function(e){for(var n=Object.keys(e),t=0,o=n;t<o.length;t++){var r=o[t];"[object Object]"!==Object.prototype.toString.call(e[r])||!e[r].hasOwnProperty("_owner")&&"inputRef"!==r&&"InputProps"!==r||delete e[r]}}(e)}n.getCoordinates=function(e){var n=e;return c[e.type]?{x:n.clientX,y:n.clientY}:null},n.findReactElementDURKA=function(e){var n=Object.keys(e).find((function(e){return e.startsWith("__reactInternalInstance$")})),t=n?e[n]:null;return null==t?null:t},n.findReactElement=function(e){var n=e;for(var t in n)if(t.startsWith("__reactInternalInstance$"))return n[t];return null},n.functionStringify=l},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=function(e){var n=this;this.recordEvents=[],this.reconcileEvents=["blur","focus","change"],this.addAllListeners=function(){n.recordEvents.forEach((function(e){window.addEventListener(e,n.eventCallback,!0)})),n.reconcileEvents.forEach((function(e){window.addEventListener(e,n.reconcileCallback,!0)}))},this.removeAllListeners=function(){n.recordEvents.forEach((function(e){window.removeEventListener(e,n.eventCallback,!0)})),n.reconcileEvents.forEach((function(e){window.removeEventListener(e,n.reconcileCallback,!0)}))},this.start=function(){window.recorderAddedControlListeners||(n.addAllListeners(),window.recorderAddedControlListeners=!0)},this.stop=function(){window.recorderAddedControlListeners&&(n.removeAllListeners(),window.recorderAddedControlListeners=!1)};var t=e.eventCallback,o=e.reconcileCallback,r=e.recordEvents,i=e.reconcileEvents,c=void 0===i?null:i;this.eventCallback=t,this.reconcileCallback=o,this.recordEvents=r,c&&(this.reconcileEvents=c)};n.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,