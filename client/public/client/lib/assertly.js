!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";function o(e,t,n){var i,c,l;if(!e||0===t)return n;if(null===(i=null==e?void 0:e._debugSource)||void 0===i?void 0:i.fileName){const i=r(null==e?void 0:e._debugOwner),s=function e(t){if(!t)return null;if(t.elementType&&t.elementType.name)return t.elementType.name;if(t.elementType&&t.elementType.displayName)return t.elementType.displayName;if(t.type.displayName)return t.type.displayName;if(t.type.name)return t.type.name;return e(t._debugOwner)}(null==e?void 0:e._debugOwner);return n.push({filename:null===(c=null==e?void 0:e._debugSource)||void 0===c?void 0:c.fileName,linenumber:null===(l=null==e?void 0:e._debugSource)||void 0===l?void 0:l.lineNumber,props:i,componentName:s}),o(null==e?void 0:e._debugOwner,t-1,n)}return o(null==e?void 0:e._debugOwner,t-1,n)}function r(e,t={}){var n;if(!e)return s(t),t;const o=e.pendingProps?Object.assign(Object.assign({},t),e.pendingProps):t;return delete o.children,(null===(n=null==e?void 0:e.type)||void 0===n?void 0:n.__proto__)&&["Component","PureComponent"].includes(e.type.__proto__.name)?(s(o),o):r(e._debugOwner,o)}n.r(t),n.d(t,"default",(function(){return d}));const i={mouseup:!0,mousedown:!0,mousemove:!0,mouseover:!0};function c(e){const t=e;return i[e.type]?{x:t.clientX,y:t.clientY}:null}function l(e){const t=Object.keys(e).find(e=>e.startsWith("__reactInternalInstance$")),n=t?e[t]:null;return null==n?null:n}function s(e){for(let t in e)if(e[t]&&"[object Function]"==={}.toString.call(e[t]))try{e[t]="[Function]"}catch(e){console.error("Error stringifying prop",e)}!function(e){const t=Object.keys(e);for(const n of t)"[object Object]"!==Object.prototype.toString.call(e[n])||!e[n].hasOwnProperty("_owner")&&"inputRef"!==n&&"InputProps"!==n||delete e[n]}(e)}class a{constructor(e){this.recordEvents=[],this.reconcileEvents=["blur","focus","change"],this.addAllListeners=()=>{this.recordEvents.forEach(e=>{window.addEventListener(e,this.eventCallback,!0)}),this.reconcileEvents.forEach(e=>{window.addEventListener(e,this.reconcileCallback,!0)})},this.removeAllListeners=()=>{this.recordEvents.forEach(e=>{window.removeEventListener(e,this.eventCallback,!0)}),this.reconcileEvents.forEach(e=>{window.removeEventListener(e,this.reconcileCallback,!0)})},this.start=()=>{window.recorderAddedControlListeners||(this.addAllListeners(),window.recorderAddedControlListeners=!0)},this.stop=()=>{window.recorderAddedControlListeners&&(this.removeAllListeners(),window.recorderAddedControlListeners=!1)};const{eventCallback:t,reconcileCallback:n,recordEvents:o,reconcileEvents:r=null}=e;this.eventCallback=t,this.reconcileCallback=n,this.recordEvents=o,r&&(this.reconcileEvents=r)}}var u=function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function c(e){try{s(o.next(e))}catch(e){i(e)}}function l(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,l)}s((o=o.apply(e,t||[])).next())}))};class d{constructor(){this.eventsToRecord=["click","change"],this.componentEventCache=[],this.previousComponent=null,this.previousMsg=null,this.start=()=>{this.eventRecorder.start()},this.stop=()=>{this.eventRecorder.stop()},this.clearEventCache=()=>{this.componentEventCache=[]},this.reconcileEventCache=e=>{(e.target?l(e.target):null)!==this.previousComponent&&(this.componentEventCache.forEach(e=>{console.log("in the reconcile"),this.sendEvent(e)}),this.clearEventCache())},this.createPopupMenu=e=>{var t;const n="componentMenu"+(new Date).getTime(),o=event,r=document.createElement("DIV"),i=Array.from(document.getElementsByClassName("componentMenu"));null==i||i.map(e=>e.remove()),r.setAttribute("id",n),r.setAttribute("class","componentMenu"),document.body.appendChild(r),r.style.position="absolute",r.style.left=o.x+"px",r.style.top=o.y+"px",r.style.zIndex="5",null===(t=null==e?void 0:e.componentInfo)||void 0===t||t.map(t=>{const o=document.createElement("BUTTON");if(o.style.width="150px",o.innerHTML=null==t?void 0:t.componentName,o.innerHTML){o.addEventListener("click",()=>this.componentMenuClick(event,n,e)),r.appendChild(o);const t=document.createElement("br");r.appendChild(t)}});const c=document.createElement("BUTTON");c.style.width="150px",c.innerHTML="Cancel",c.addEventListener("click",()=>this.removeSingleMenu(n)),r.appendChild(c)},this.removeSingleMenu=e=>{const t=document.getElementById(e);null==t||t.remove()},this.componentMenuClick=(e,t,n)=>{var o;console.log("this is the click call back: ",e),console.log("this is the message in the callback: ",n.componentInfo),null==e||e.stopPropagation(),this.sendEvent(Object.assign(Object.assign({},n),{componentInfo:null===(o=n.componentInfo)||void 0===o?void 0:o.filter(t=>{var n;return t.componentName===(null===(n=e.target)||void 0===n?void 0:n.innerHTML)})})),this.removeSingleMenu(t)},this.getMessage=(e,t)=>{var n;const i=t.target||t.srcElement,l=i,s=i;r(e),o(e,10,[]);return{action:t.type,checked:(null===(n=null==t?void 0:t.target)||void 0===n?void 0:n.hasOwnProperty("checked"))?l.checked:null,coordinates:c(t),href:s.href?s.href:null,keyCode:t.keyCode?t.keyCode:null,tagName:l.tagName,tagType:l.type,textContent:l.textContent||l.innerText,timestamp:(new Date).getTime(),value:l.value,writeTestLocation:"",componentInfo:o(e,10,[])}},this.recordEvent=e=>{var t,n;const o=e.target;if(!(null===(n=null===(t=null==o?void 0:o.parentElement)||void 0===t?void 0:t.getAttribute("id"))||void 0===n?void 0:n.includes("componentMenu"))&&e.target)try{if(this.previousMsg&&("change"===e.type||"click"===e.type)&&this.previousMsg&&"click"===this.previousMsg.action&&(new Date).getTime()-this.previousMsg.timestamp<100)return void console.log("message not send due to time");const t=l(e.target),n=this.getMessage(t,e);console.log("reactComponent and message in RECORD_EVENT: ",t,n),localStorage.setItem("lastEvent",JSON.stringify(n)),this.previousMsg=n,this.previousComponent=t,this.createPopupMenu(n)}catch(e){console.error("Error recording event",e)}},this.sendEvent=e=>u(this,void 0,void 0,(function*(){var t;const n=window.dataLayer[0].apiKey,o=window.dataLayer[0].testLocation,r=`//localhost:3002/api/accounts/${n}/events/`;console.log("this is the message in SEND_EVENT: ",e),null===(t=null==e?void 0:e.componentInfo)||void 0===t||t.map(e=>(e.writeTestLocation=o,e)),yield fetch(r,{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:window.location.href,event:e,placeholder:null})})})),this.eventRecorder=new a({recordEvents:this.eventsToRecord,eventCallback:this.recordEvent,reconcileCallback:this.reconcileEventCache})}}window.eventRecorder=new d,window.eventRecorder.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,