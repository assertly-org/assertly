!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";function o(e,n,t){var r,i,l;if(!e||0===n)return t;if(null===(r=null==e?void 0:e._debugSource)||void 0===r?void 0:r.fileName){const r=function e(n,t={}){var o;if(!n)return c(t),t;const r=n.pendingProps?Object.assign(Object.assign({},t),n.pendingProps):t;if(delete r.children,(null===(o=null==n?void 0:n.type)||void 0===o?void 0:o.__proto__)&&["Component","PureComponent"].includes(n.type.__proto__.name))return c(r),r;return e(n._debugOwner,r)}(null==e?void 0:e._debugOwner),s=function e(n){if(!n)return null;if(n.elementType&&n.elementType.name)return n.elementType.name;if(n.elementType&&n.elementType.displayName)return n.elementType.displayName;if(n.type.displayName)return n.type.displayName;if(n.type.name)return n.type.name;return e(n._debugOwner)}(null==e?void 0:e._debugOwner);return t.push({filename:null===(i=null==e?void 0:e._debugSource)||void 0===i?void 0:i.fileName,linenumber:null===(l=null==e?void 0:e._debugSource)||void 0===l?void 0:l.lineNumber,props:r,componentName:s}),o(null==e?void 0:e._debugOwner,n-1,t)}return o(null==e?void 0:e._debugOwner,n-1,t)}t.r(n),t.d(n,"default",(function(){return u}));const r={mouseup:!0,mousedown:!0,mousemove:!0,mouseover:!0};function i(e){const n=e;return r[e.type]?{x:n.clientX,y:n.clientY}:null}function l(e){const n=Object.keys(e).find(e=>e.startsWith("__reactInternalInstance$")),t=n?e[n]:null;return null==t?null:t}function c(e){for(let n in e)if(e[n]&&"[object Function]"==={}.toString.call(e[n]))try{e[n]=""+e[n],e[n]=e[n].replace(/(\r\n|\n|\r)/gm,"")}catch(e){console.error("Error stringifying prop",e)}!function(e){const n=Object.keys(e);for(const t of n)"[object Object]"!==Object.prototype.toString.call(e[t])||!e[t].hasOwnProperty("_owner")&&"inputRef"!==t&&"InputProps"!==t||delete e[t]}(e)}class s{constructor(e){this.recordEvents=[],this.reconcileEvents=["blur","focus","change"],this.addAllListeners=()=>{this.recordEvents.forEach(e=>{window.addEventListener(e,this.eventCallback,!0)}),this.reconcileEvents.forEach(e=>{window.addEventListener(e,this.reconcileCallback,!0)})},this.removeAllListeners=()=>{this.recordEvents.forEach(e=>{window.removeEventListener(e,this.eventCallback,!0)}),this.reconcileEvents.forEach(e=>{window.removeEventListener(e,this.reconcileCallback,!0)})},this.start=()=>{window.recorderAddedControlListeners||(this.addAllListeners(),window.recorderAddedControlListeners=!0)},this.stop=()=>{window.recorderAddedControlListeners&&(this.removeAllListeners(),window.recorderAddedControlListeners=!1)};const{eventCallback:n,reconcileCallback:t,recordEvents:o,reconcileEvents:r=null}=e;this.eventCallback=n,this.reconcileCallback=t,this.recordEvents=o,r&&(this.reconcileEvents=r)}}var a=function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function l(e){try{s(o.next(e))}catch(e){i(e)}}function c(e){try{s(o.throw(e))}catch(e){i(e)}}function s(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,c)}s((o=o.apply(e,n||[])).next())}))};class u{constructor(){this.eventsToRecord=["click","change"],this.componentEventCache=[],this.previousComponent=null,this.previousMsg=null,this.start=()=>{this.eventRecorder.start()},this.stop=()=>{this.eventRecorder.stop()},this.clearEventCache=()=>{this.componentEventCache=[]},this.reconcileEventCache=e=>{(e.target?l(e.target):null)!==this.previousComponent&&(this.componentEventCache.forEach(e=>{console.log("in the reconcile"),this.sendEvent(e)}),this.clearEventCache())},this.createPopupMenu=e=>{var n;const t="componentMenu"+(new Date).getTime(),o=event,r=document.createElement("DIV"),i=Array.from(document.getElementsByClassName("componentMenu"));null==i||i.map(e=>e.remove()),r.setAttribute("id",t),r.setAttribute("class","componentMenu"),document.body.appendChild(r),r.style.position="absolute",r.style.left=o.x+"px",r.style.top=o.y+"px",r.style.zIndex="5",null===(n=null==e?void 0:e.componentInfo)||void 0===n||n.map(n=>{const o=document.createElement("BUTTON");if(o.style.width="150px",o.innerHTML=null==n?void 0:n.componentName,o.innerHTML){o.addEventListener("click",()=>this.componentMenuClick(event,t,e)),r.appendChild(o);const n=document.createElement("br");r.appendChild(n)}});const l=document.createElement("BUTTON");l.style.width="150px",l.innerHTML="Cancel",l.addEventListener("click",()=>this.removeSingleMenu(t)),r.appendChild(l)},this.removeSingleMenu=e=>{const n=document.getElementById(e);null==n||n.remove()},this.componentMenuClick=(e,n,t)=>{var o;console.log("this is the click call back: ",e),console.log("this is the message in the callback: ",t.componentInfo),null==e||e.stopPropagation(),this.sendEvent(Object.assign(Object.assign({},t),{componentInfo:null===(o=t.componentInfo)||void 0===o?void 0:o.filter(n=>{var t;return n.componentName===(null===(t=e.target)||void 0===t?void 0:t.innerHTML)})})),this.removeSingleMenu(n)},this.getMessage=(e,n)=>{var t,r,l;const c=n.target||n.srcElement,s=c,a=c,u=o(e,10,[]),d=(null===(r=null===(t=null==u?void 0:u.slice(0))||void 0===t?void 0:t.reverse())||void 0===r?void 0:r.reduce((e,n)=>{var t;if(null===(t=n.props)||void 0===t?void 0:t.onClick)return Object.assign({},n)},{}))||null;return{action:n.type,checked:(null===(l=null==n?void 0:n.target)||void 0===l?void 0:l.hasOwnProperty("checked"))?s.checked:null,coordinates:i(n),href:a.href?a.href:null,keyCode:n.keyCode?n.keyCode:null,tagName:s.tagName,tagType:s.type,textContent:s.textContent||s.innerText,timestamp:(new Date).getTime(),value:s.value,writeTestLocation:"",componentInfo:u,clickHandlerComponent:d}},this.recordEvent=e=>{var n,t;const o=e.target,r=e;if(!(null===(t=null===(n=null==o?void 0:o.parentElement)||void 0===n?void 0:n.getAttribute("id"))||void 0===t?void 0:t.includes("componentMenu"))&&e.target)try{if(this.previousMsg&&("change"===e.type||"click"===e.type)&&this.previousMsg&&"click"===this.previousMsg.action&&(new Date).getTime()-this.previousMsg.timestamp<100)return void console.log("message not send due to time");const n=l(e.target),t=this.getMessage(n,e);console.log("reactComponent and message in RECORD_EVENT: ",n,t),localStorage.setItem("lastEvent",JSON.stringify(t)),this.previousMsg=t,this.previousComponent=n,(null==r?void 0:r.metaKey)&&this.createPopupMenu(t)}catch(e){console.error("Error recording event",e)}},this.sendEvent=e=>a(this,void 0,void 0,(function*(){var n;const t=window.dataLayer[0].apiKey,o=window.dataLayer[0].testLocation,r=`//localhost:3002/api/accounts/${t}/events/`;console.log("this is the message in SEND_EVENT: ",e),null===(n=null==e?void 0:e.componentInfo)||void 0===n||n.map(e=>(e.writeTestLocation=o,e)),yield fetch(r,{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:window.location.href,event:e,placeholder:null})})})),this.eventRecorder=new s({recordEvents:this.eventsToRecord,eventCallback:this.recordEvent,reconcileCallback:this.reconcileEventCache})}}window.eventRecorder=new u,window.eventRecorder.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,