{"ast":null,"code":"import _objectSpread from \"/Users/zealotsd/Desktop/assertly/assertly-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/zealotsd/Desktop/assertly/assertly-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/zealotsd/Desktop/assertly/assertly-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n// import {logout} from '../actions/auth';\nexport default function clientMiddleware(client) {\n  return function (_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        if (typeof action === \"function\") {\n          return action(dispatch, getState);\n        }\n\n        var promise = action.promise,\n            types = action.types,\n            rest = _objectWithoutProperties(action, [\"promise\", \"types\"]); // eslint-disable-line no-redeclare\n\n\n        if (!promise) {\n          return next(action);\n        }\n\n        var _types = _slicedToArray(types, 3),\n            REQUEST = _types[0],\n            SUCCESS = _types[1],\n            FAILURE = _types[2];\n\n        next(_objectSpread({}, rest, {\n          type: REQUEST\n        }));\n        var actionPromise = promise(client); // actionPromise is a 'then'-able promise\n\n        actionPromise.then(function (body) {\n          next(_objectSpread({}, rest, {\n            payload: body,\n            type: SUCCESS\n          }));\n        }, function (error) {\n          next(_objectSpread({}, rest, {\n            error: error,\n            type: FAILURE\n          }));\n        }).catch(function (error) {\n          next(_objectSpread({}, rest, {\n            error: error,\n            type: FAILURE\n          }));\n        });\n        return actionPromise;\n      };\n    };\n  };\n}","map":{"version":3,"sources":["/Users/zealotsd/Desktop/assertly/assertly-app/src/redux/middleware/clientMiddleware.js"],"names":["clientMiddleware","client","dispatch","getState","next","action","promise","types","rest","REQUEST","SUCCESS","FAILURE","type","actionPromise","then","body","payload","error","catch"],"mappings":";;;AAAA;AAEA,eAAe,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AAC/C,SAAO;AAAA,QAAGC,QAAH,QAAGA,QAAH;AAAA,QAAaC,QAAb,QAAaA,QAAb;AAAA,WAA4B,UAAAC,IAAI;AAAA,aAAI,UAAAC,MAAM,EAAI;AACnD,YAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChC,iBAAOA,MAAM,CAACH,QAAD,EAAWC,QAAX,CAAb;AACD;;AAHkD,YAK3CG,OAL2C,GAKfD,MALe,CAK3CC,OAL2C;AAAA,YAKlCC,KALkC,GAKfF,MALe,CAKlCE,KALkC;AAAA,YAKxBC,IALwB,4BAKfH,MALe,yBAKP;;;AAE5C,YAAI,CAACC,OAAL,EAAc;AACZ,iBAAOF,IAAI,CAACC,MAAD,CAAX;AACD;;AATkD,oCAWfE,KAXe;AAAA,YAW5CE,OAX4C;AAAA,YAWnCC,OAXmC;AAAA,YAW1BC,OAX0B;;AAanDP,QAAAA,IAAI,mBAAMI,IAAN;AAAYI,UAAAA,IAAI,EAAEH;AAAlB,WAAJ;AAEA,YAAMI,aAAa,GAAGP,OAAO,CAACL,MAAD,CAA7B,CAfmD,CAiBnD;;AACAY,QAAAA,aAAa,CACZC,IADD,CAEE,UAAAC,IAAI,EAAI;AACNX,UAAAA,IAAI,mBAAMI,IAAN;AAAYQ,YAAAA,OAAO,EAAED,IAArB;AAA2BH,YAAAA,IAAI,EAAEF;AAAjC,aAAJ;AACD,SAJH,EAKE,UAAAO,KAAK,EAAI;AACPb,UAAAA,IAAI,mBAAMI,IAAN;AAAYS,YAAAA,KAAK,EAALA,KAAZ;AAAmBL,YAAAA,IAAI,EAAED;AAAzB,aAAJ;AACD,SAPH,EASGO,KATH,CASS,UAAAD,KAAK,EAAI;AACdb,UAAAA,IAAI,mBAAMI,IAAN;AAAYS,YAAAA,KAAK,EAALA,KAAZ;AAAmBL,YAAAA,IAAI,EAAED;AAAzB,aAAJ;AACD,SAXH;AAaA,eAAOE,aAAP;AACD,OAhCsC;AAAA,KAAhC;AAAA,GAAP;AAiCD","sourcesContent":["// import {logout} from '../actions/auth';\n\nexport default function clientMiddleware(client) {\n  return ({ dispatch, getState }) => next => action => {\n    if (typeof action === \"function\") {\n      return action(dispatch, getState);\n    }\n\n    const { promise, types, ...rest } = action; // eslint-disable-line no-redeclare\n\n    if (!promise) {\n      return next(action);\n    }\n\n    const [REQUEST, SUCCESS, FAILURE] = types;\n\n    next({ ...rest, type: REQUEST });\n\n    const actionPromise = promise(client);\n\n    // actionPromise is a 'then'-able promise\n    actionPromise\n    .then(\n      body => {\n        next({ ...rest, payload: body, type: SUCCESS });\n      },\n      error => {\n        next({ ...rest, error, type: FAILURE });\n      }\n    )\n      .catch(error => {\n        next({ ...rest, error, type: FAILURE });\n      });\n\n    return actionPromise;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}