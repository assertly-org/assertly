{"ast":null,"code":"import _objectSpread from \"/Users/zealotsd/Desktop/assertly/assertly-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n/* eslint-disable */\nimport config from \"../config\";\n\nfunction formatUrl(path) {\n  if (path.match(/https?|localhost/)) return path;\n  var adjustedPath = path[0] !== \"/\" ? \"/\".concat(path) : path;\n  return \"\".concat(config.apiHost).concat(adjustedPath);\n}\n\nexport var isEmpty = function isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n\n  return true;\n};\n\nvar queryString = function queryString(params) {\n  return params && !isEmpty(params) ? \"?\" + Object.keys(params).map(function (key) {\n    return key + \"=\" + params[key];\n  }).join(\"&\") : \"\";\n}; // Custom API error to throw\n\n\nexport function ApiError(message, data, status) {\n  var response = null;\n  var isObject = false; // We are trying to parse response\n\n  try {\n    response = JSON.parse(data);\n    isObject = true;\n  } catch (e) {\n    response = data;\n  }\n\n  this.response = response;\n  this.message = message;\n  this.status = status;\n\n  this.toString = function () {\n    return \"\".concat(this.message, \"\\nResponse:\\n\").concat(isObject ? JSON.stringify(this.response, null, 2) : this.response);\n  };\n} // API wrapper function\n\nvar fetchResource = function fetchResource(path) {\n  var userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Define default options\n  var defaultOptions = {\n    mode: \"cors\",\n    // no-cors, cors, *same-origin\n    cache: \"no-cache\",\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"omit\",\n    // include, same-origin, *omit\n    redirect: \"follow\",\n    // manual, *follow, error\n    referrer: \"no-referrer\" // no-referrer, *client\n\n  }; // Define default headers\n\n  var defaultHeaders = {\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n  var token = localStorage.getItem(\"token\");\n\n  if (token && token !== \"null\") {\n    defaultHeaders = _objectSpread({}, defaultHeaders, {\n      authorization: \"Token \" + token\n    });\n  }\n\n  var options = _objectSpread({}, defaultOptions, userOptions, {\n    // Merge headers\n    headers: _objectSpread({}, defaultHeaders, userOptions.headers)\n  }); // Build Url\n\n\n  var query = userOptions && userOptions.query ? queryString(userOptions.query) : \"\";\n  var url = \"\".concat(formatUrl(path)).concat(query); // const url = `${ API_URL }${ path }${ query }`;\n  // Detect is we are uploading a file\n\n  var isFile = options.body instanceof File; // Stringify JSON data\n  // If body is not a file\n\n  if (options.body && typeof options.body === \"object\" && !isFile) {\n    options.body = JSON.stringify(options.body);\n  } // Variable which will be used for storing response\n\n\n  var response = null;\n  return fetch(url, options).then(function (responseObject) {\n    // Saving response for later use in lower scopes\n    response = responseObject; // HTTP unauthorized\n\n    if (response.status === 401) {} // Handle unauthorized requests\n    // Maybe redirect to login page?\n    // Check for error HTTP error codes\n\n\n    if (response.status < 200 || response.status >= 300) {\n      // Get response as text\n      return response.text();\n    }\n\n    if (response.status === 204) {\n      return null;\n    } // Get response as json\n\n\n    return response.json();\n  }) // \"parsedResponse\" will be either text or javascript object depending if\n  // \"response.text()\" or \"response.json()\" got called in the upper scope\n  .then(function (parsedResponse) {\n    // Check for HTTP error codes\n    if (response.status < 200 || response.status >= 300) {\n      // Throw error\n      throw parsedResponse;\n    } // Request succeeded\n\n\n    return parsedResponse;\n  }).catch(function (error) {\n    // Throw custom API error\n    // If response exists it means HTTP error occured\n    if (response) {\n      throw new ApiError(\"Request failed with status \".concat(response.status, \".\"), error, response.status);\n    } else {\n      throw new ApiError(error.toString(), null, \"REQUEST_FAILED\");\n    }\n  });\n};\n\nexport default fetchResource;","map":{"version":3,"sources":["/Users/zealotsd/Desktop/assertly/assertly-app/src/redux/ApiClient.js"],"names":["config","formatUrl","path","match","adjustedPath","apiHost","isEmpty","obj","key","hasOwnProperty","queryString","params","Object","keys","map","join","ApiError","message","data","status","response","isObject","JSON","parse","e","toString","stringify","fetchResource","userOptions","defaultOptions","mode","cache","credentials","redirect","referrer","defaultHeaders","token","localStorage","getItem","authorization","options","headers","query","url","isFile","body","File","fetch","then","responseObject","text","json","parsedResponse","catch","error"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport config from \"../config\";\n\nfunction formatUrl(path) {\n  if (path.match(/https?|localhost/)) return path;\n  const adjustedPath = path[0] !== \"/\" ? `/${path}` : path;\n\n  return `${config.apiHost}${adjustedPath}`;\n}\n\nexport const isEmpty = obj => {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n};\n\nconst queryString = params =>\n  params && !isEmpty(params)\n    ? \"?\" +\n      Object.keys(params)\n        .map(key => key + \"=\" + params[key])\n        .join(\"&\")\n    : \"\";\n\n// Custom API error to throw\nexport function ApiError(message, data, status) {\n  let response = null;\n  let isObject = false;\n\n  // We are trying to parse response\n  try {\n    response = JSON.parse(data);\n    isObject = true;\n  } catch (e) {\n    response = data;\n  }\n\n  this.response = response;\n  this.message = message;\n  this.status = status;\n  this.toString = function() {\n    return `${this.message}\\nResponse:\\n${\n      isObject ? JSON.stringify(this.response, null, 2) : this.response\n    }`;\n  };\n}\n\n// API wrapper function\nconst fetchResource = (path, userOptions = {}) => {\n  // Define default options\n  const defaultOptions = {\n    mode: \"cors\", // no-cors, cors, *same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"omit\", // include, same-origin, *omit\n    redirect: \"follow\", // manual, *follow, error\n    referrer: \"no-referrer\" // no-referrer, *client\n  };\n  // Define default headers\n  let defaultHeaders = {\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n\n  const token = localStorage.getItem(\"token\");\n\n  if (token && token !== \"null\") {\n    defaultHeaders = {\n      ...defaultHeaders,\n      authorization: \"Token \" + token\n    };\n  }\n\n  const options = {\n    // Merge options\n    ...defaultOptions,\n    ...userOptions,\n    // Merge headers\n    headers: {\n      ...defaultHeaders,\n      ...userOptions.headers\n    }\n  };\n\n  // Build Url\n  const query =\n    userOptions && userOptions.query ? queryString(userOptions.query) : \"\";\n\n  const url = `${formatUrl(path)}${query}`;\n  // const url = `${ API_URL }${ path }${ query }`;\n\n  // Detect is we are uploading a file\n  const isFile = options.body instanceof File;\n\n  // Stringify JSON data\n  // If body is not a file\n  if (options.body && typeof options.body === \"object\" && !isFile) {\n    options.body = JSON.stringify(options.body);\n  }\n\n  // Variable which will be used for storing response\n  let response = null;\n\n  return (\n    fetch(url, options)\n      .then(responseObject => {\n        // Saving response for later use in lower scopes\n        response = responseObject;\n\n        // HTTP unauthorized\n        if (response.status === 401) {\n          // Handle unauthorized requests\n          // Maybe redirect to login page?\n        }\n\n        // Check for error HTTP error codes\n        if (response.status < 200 || response.status >= 300) {\n          // Get response as text\n          return response.text();\n        }\n\n        if (response.status === 204) {\n          return null;\n        }\n\n        // Get response as json\n        return response.json();\n      })\n      // \"parsedResponse\" will be either text or javascript object depending if\n      // \"response.text()\" or \"response.json()\" got called in the upper scope\n      .then(parsedResponse => {\n        // Check for HTTP error codes\n        if (response.status < 200 || response.status >= 300) {\n          // Throw error\n          throw parsedResponse;\n        }\n\n        // Request succeeded\n        return parsedResponse;\n      })\n      .catch(error => {\n        // Throw custom API error\n        // If response exists it means HTTP error occured\n        if (response) {\n          throw new ApiError(\n            `Request failed with status ${response.status}.`,\n            error,\n            response.status\n          );\n        } else {\n          throw new ApiError(error.toString(), null, \"REQUEST_FAILED\");\n        }\n      })\n  );\n};\n\nexport default fetchResource;\n"]},"metadata":{},"sourceType":"module"}