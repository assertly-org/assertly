{"ast":null,"code":"import _slicedToArray from \"/Users/zealotsd/Desktop/assertly/assertly-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zealotsd/Desktop/assertly/assertly-app/src/TestEditor/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Runner from '../Runner';\nimport './styles.css'; // export default () => {return (<Runner/>)}\n\nexport default (function () {\n  console.log('allen sucks');\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      asserting = _useState2[0],\n      setAsserting = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentUrl = _useState4[0],\n      setCurrentUrl = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      events: state.events.events\n    };\n  }),\n      events = _useSelector.events;\n\n  var toggleAssert = function toggleAssert(on) {\n    setAsserting(on);\n    window.frames.runner.postMessage(JSON.stringify({\n      assert: on\n    }), '*');\n  };\n\n  useEffect(function () {\n    var lastEventWithUrl = events && events.length > 0 && events.reverse().find(function (evt) {\n      return evt.url;\n    });\n    var url = lastEventWithUrl && lastEventWithUrl.url;\n    if (url !== currentUrl) setCurrentUrl(url);\n  });\n  return React.createElement(\"div\", {\n    className: \"cenetered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Runner\"), React.createElement(Runner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })) //    <>\n  // <div className=\"split left\">  \n  //         <h3>Events</h3>     \n  //         <Reporter />\n  // </div>\n  // <div className=\"split right\"> \n  //        <h3>Runner</h3>         \n  //         <Runner />\n  //       </div>\n  //   </>\n  ;\n}); // export default () => {\n//   console.log('allen sucks')\n//   const [asserting, setAsserting] = useState<Boolean>(false);\n//   const [currentUrl, setCurrentUrl] = useState<String>('');\n//   const {events} = useSelector((state: any) => ({events: state.events.events}));\n//   const toggleAssert = (on: Boolean) => {\n//     setAsserting(on);\n//     (window as any).frames.runner.postMessage(JSON.stringify({assert: on}), '*');\n//   };\n//   useEffect(() => {\n//     const lastEventWithUrl = events && events.length > 0 && events.reverse().find((evt: any) => evt.url);\n//     const url = lastEventWithUrl && lastEventWithUrl.url;\n//     if (url !== currentUrl)\n//       setCurrentUrl(url);\n//   });  \n//   return (\n//     <Grid container spacing={2}>\n//       <Grid container item xs={12} style={{padding: '15px 15px'}}>\n//         <Grid item xs={4}>  \n//           <Grid container alignItems=\"center\">\n//             <Link to='/testsets'>\n//               <BackIcon color=\"primary\" />\n//             </Link>\n//             <Divider orientation=\"vertical\" />\n//             <Button  size=\"small\" color=\"default\">\n//               <ReplayIcon color=\"primary\"/> Replay\n//             </Button>\n//             <Divider orientation=\"vertical\" />\n//             <Button onClick={() => toggleAssert(!asserting)}  size=\"small\" color=\"default\">\n//               {asserting ? <StopAssertIcon color=\"primary\"/> : <AssertIcon color=\"primary\"/>} Assert\n//             </Button>\n//           </Grid>         \n//         </Grid>  \n//         <Grid item xs={8}>\n//             <input className=\"url-bar\" value={String(currentUrl)} disabled/>\n//         </Grid>        \n//       </Grid> \n//       <Grid item xs={4}>   \n//         <h3>Events</h3>     \n//         <Reporter />\n//       </Grid>\n//       <Grid item xs={8}>\n//        <h3>Runner</h3>         \n//         <Runner />\n//       </Grid>\n//     </Grid>\n//   );\n// }","map":{"version":3,"sources":["/Users/zealotsd/Desktop/assertly/assertly-app/src/TestEditor/index.tsx"],"names":["React","useState","useEffect","useSelector","Runner","console","log","asserting","setAsserting","currentUrl","setCurrentUrl","state","events","toggleAssert","on","window","frames","runner","postMessage","JSON","stringify","assert","lastEventWithUrl","length","reverse","find","evt","url"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AAaA,OAAO,cAAP,C,CAEA;;AACA,gBAAe,YAAM;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AADmB,kBAEeL,QAAQ,CAAU,KAAV,CAFvB;AAAA;AAAA,MAEZM,SAFY;AAAA,MAEDC,YAFC;;AAAA,mBAGiBP,QAAQ,CAAS,EAAT,CAHzB;AAAA;AAAA,MAGZQ,UAHY;AAAA,MAGAC,aAHA;;AAAA,qBAIFP,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAiB;AAACC,MAAAA,MAAM,EAAED,KAAK,CAACC,MAAN,CAAaA;AAAtB,KAAjB;AAAA,GAAD,CAJT;AAAA,MAIZA,MAJY,gBAIZA,MAJY;;AAOnB,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAiB;AACpCN,IAAAA,YAAY,CAACM,EAAD,CAAZ;AACCC,IAAAA,MAAD,CAAgBC,MAAhB,CAAuBC,MAAvB,CAA8BC,WAA9B,CAA0CC,IAAI,CAACC,SAAL,CAAe;AAACC,MAAAA,MAAM,EAAEP;AAAT,KAAf,CAA1C,EAAwE,GAAxE;AACD,GAHD;;AAKAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMoB,gBAAgB,GAAGV,MAAM,IAAIA,MAAM,CAACW,MAAP,GAAgB,CAA1B,IAA+BX,MAAM,CAACY,OAAP,GAAiBC,IAAjB,CAAsB,UAACC,GAAD;AAAA,aAAcA,GAAG,CAACC,GAAlB;AAAA,KAAtB,CAAxD;AACA,QAAMA,GAAG,GAAGL,gBAAgB,IAAIA,gBAAgB,CAACK,GAAjD;AAEA,QAAIA,GAAG,KAAKlB,UAAZ,EACEC,aAAa,CAACiB,GAAD,CAAb;AACH,GANQ,CAAT;AAQA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAEC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CADF,CAKF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfE;AAiBD,CArCD,E,CAwCA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {useSelector} from 'react-redux';\nimport Reporter from '../Reporter';\nimport Runner from '../Runner';\n\nimport Button from '@material-ui/core/Button';\nimport {Link} from 'react-router-dom';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport Fab from '@material-ui/core/Fab';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport BackIcon from '@material-ui/icons/ArrowBack'\nimport AssertIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport StopAssertIcon from '@material-ui/icons/HighlightOff';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\n\nimport './styles.css';\n\n// export default () => {return (<Runner/>)}\nexport default () => {\n  console.log('allen sucks')\n  const [asserting, setAsserting] = useState<Boolean>(false);\n  const [currentUrl, setCurrentUrl] = useState<String>('');\n  const {events} = useSelector((state: any) => ({events: state.events.events}));\n  \n\n  const toggleAssert = (on: Boolean) => {\n    setAsserting(on);\n    (window as any).frames.runner.postMessage(JSON.stringify({assert: on}), '*');\n  };\n\n  useEffect(() => {\n    const lastEventWithUrl = events && events.length > 0 && events.reverse().find((evt: any) => evt.url);\n    const url = lastEventWithUrl && lastEventWithUrl.url;\n    \n    if (url !== currentUrl)\n      setCurrentUrl(url);\n  });  \n\n  return (\n    <div className=\"cenetered\"> \n    <h3>Runner</h3>         \n     <Runner />\n   </div>\n//    <>\n\n// <div className=\"split left\">  \n//         <h3>Events</h3>     \n//         <Reporter />\n// </div>\n// <div className=\"split right\"> \n//        <h3>Runner</h3>         \n//         <Runner />\n//       </div>\n//   </>\n  );\n}\n\n\n// export default () => {\n//   console.log('allen sucks')\n//   const [asserting, setAsserting] = useState<Boolean>(false);\n//   const [currentUrl, setCurrentUrl] = useState<String>('');\n//   const {events} = useSelector((state: any) => ({events: state.events.events}));\n  \n\n//   const toggleAssert = (on: Boolean) => {\n//     setAsserting(on);\n//     (window as any).frames.runner.postMessage(JSON.stringify({assert: on}), '*');\n//   };\n\n//   useEffect(() => {\n//     const lastEventWithUrl = events && events.length > 0 && events.reverse().find((evt: any) => evt.url);\n//     const url = lastEventWithUrl && lastEventWithUrl.url;\n    \n//     if (url !== currentUrl)\n//       setCurrentUrl(url);\n//   });  \n\n//   return (\n//     <Grid container spacing={2}>\n//       <Grid container item xs={12} style={{padding: '15px 15px'}}>\n//         <Grid item xs={4}>  \n//           <Grid container alignItems=\"center\">\n//             <Link to='/testsets'>\n//               <BackIcon color=\"primary\" />\n//             </Link>\n//             <Divider orientation=\"vertical\" />\n//             <Button  size=\"small\" color=\"default\">\n//               <ReplayIcon color=\"primary\"/> Replay\n//             </Button>\n//             <Divider orientation=\"vertical\" />\n//             <Button onClick={() => toggleAssert(!asserting)}  size=\"small\" color=\"default\">\n//               {asserting ? <StopAssertIcon color=\"primary\"/> : <AssertIcon color=\"primary\"/>} Assert\n//             </Button>\n//           </Grid>         \n//         </Grid>  \n//         <Grid item xs={8}>\n//             <input className=\"url-bar\" value={String(currentUrl)} disabled/>\n//         </Grid>        \n//       </Grid> \n//       <Grid item xs={4}>   \n//         <h3>Events</h3>     \n//         <Reporter />\n//       </Grid>\n//       <Grid item xs={8}>\n//        <h3>Runner</h3>         \n//         <Runner />\n//       </Grid>\n//     </Grid>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}