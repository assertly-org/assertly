{"version":3,"file":"memo.js","sourceRoot":"","sources":["../src/memo.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B;;GAEG;AACH,MAAM,OAAO,IAAI;IAMf;QACE,2BAA2B;QAC3B,IAAI,CAAC,UAAU,GAAG,OAAO,OAAO,KAAK,UAAU,CAAC;QAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACpD,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,GAAQ;QACrB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACvB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACpB,OAAO,KAAK,CAAC;SACd;aAAM;YACL,yCAAyC;YACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5B,IAAI,KAAK,KAAK,GAAG,EAAE;oBACjB,OAAO,IAAI,CAAC;iBACb;aACF;YACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,GAAQ;QACvB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxB;aAAM;YACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACzB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxB,MAAM;iBACP;aACF;SACF;IACH,CAAC;CACF","sourcesContent":["// tslint:disable:no-unsafe-any\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly inner: any;\n\n  public constructor() {\n    // tslint:disable-next-line\n    this.hasWeakSet = typeof WeakSet === 'function';\n    this.inner = this.hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this.hasWeakSet) {\n      if (this.inner.has(obj)) {\n        return true;\n      }\n      this.inner.add(obj);\n      return false;\n    } else {\n      // tslint:disable-next-line:prefer-for-of\n      for (let i = 0; i < this.inner.length; i++) {\n        const value = this.inner[i];\n        if (value === obj) {\n          return true;\n        }\n      }\n      this.inner.push(obj);\n      return false;\n    }\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this.hasWeakSet) {\n      this.inner.delete(obj);\n    } else {\n      for (let i = 0; i < this.inner.length; i++) {\n        if (this.inner[i] === obj) {\n          this.inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n"]}