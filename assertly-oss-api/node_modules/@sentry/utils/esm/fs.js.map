{"version":3,"file":"fs.js","sourceRoot":"","sources":["../src/fs.ts"],"names":[],"mappings":"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","sourcesContent":["import { mkdir, mkdirSync, readFile, statSync } from 'fs';\nimport { dirname, resolve } from 'path';\n\nconst _0777 = parseInt('0777', 8);\n\n/**\n * Asynchronously reads given files content.\n *\n * @param path A relative or absolute path to the file\n * @returns A Promise that resolves when the file has been read.\n */\nexport async function readFileAsync(path: string): Promise<string> {\n  // We cannot use util.promisify here because that was only introduced in Node\n  // 8 and we need to support older Node versions.\n  return new Promise<string>((res, reject) => {\n    readFile(path, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        res(data);\n      }\n    });\n  });\n}\n\n/**\n * Asynchronously creates the given directory.\n *\n * @param path A relative or absolute path to the directory.\n * @param mode The permission mode.\n * @returns A Promise that resolves when the path has been created.\n */\nasync function mkdirAsync(path: string, mode: number): Promise<void> {\n  // We cannot use util.promisify here because that was only introduced in Node\n  // 8 and we need to support older Node versions.\n  return new Promise<void>((res, reject) => {\n    mkdir(path, mode, err => {\n      if (err) {\n        reject(err);\n      } else {\n        res();\n      }\n    });\n  });\n}\n\n/**\n * Recursively creates the given path.\n *\n * @param path A relative or absolute path to create.\n * @returns A Promise that resolves when the path has been created.\n */\nexport async function mkdirp(path: string): Promise<void> {\n  // tslint:disable-next-line:no-bitwise\n  const mode = _0777 & ~process.umask();\n  const realPath = resolve(path);\n\n  try {\n    return mkdirAsync(realPath, mode);\n  } catch (err) {\n    const error = err as { code: string };\n    if (error && error.code === 'ENOENT') {\n      await mkdirp(dirname(realPath));\n      return mkdirAsync(realPath, mode);\n    } else {\n      try {\n        if (!statSync(realPath).isDirectory()) {\n          throw err;\n        }\n      } catch (_) {\n        throw err;\n      }\n    }\n  }\n}\n\n/**\n * Synchronous version of {@link mkdirp}.\n *\n * @param path A relative or absolute path to create.\n */\nexport function mkdirpSync(path: string): void {\n  // tslint:disable-next-line:no-bitwise\n  const mode = _0777 & ~process.umask();\n  const realPath = resolve(path);\n\n  try {\n    mkdirSync(realPath, mode);\n  } catch (err) {\n    const error = err as { code: string };\n    if (error && error.code === 'ENOENT') {\n      mkdirpSync(dirname(realPath));\n      mkdirSync(realPath, mode);\n    } else {\n      try {\n        if (!statSync(realPath).isDirectory()) {\n          throw err;\n        }\n      } catch (_) {\n        throw err;\n      }\n    }\n  }\n}\n"]}