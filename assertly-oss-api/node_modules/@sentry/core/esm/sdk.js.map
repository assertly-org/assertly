{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAQ9C;;;;;;;GAOG;AACH,MAAM,UAAU,WAAW,CAAsC,WAA8B,EAAE,OAAU;IACzG,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE;QAC1B,MAAM,CAAC,MAAM,EAAE,CAAC;KACjB;IAED,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,CAAC,OAAO,EAAE,CAAC;AACnB,CAAC","sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils/logger';\nimport { Client, Options } from './interfaces';\n\n/** A class object that can instanciate Client objects. */\nexport interface ClientClass<F extends Client, O extends Options> {\n  new (options: O): F;\n}\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n * @returns The installed and bound client instance.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n\n  const client = new clientClass(options);\n  getCurrentHub().bindClient(client);\n  client.install();\n}\n"]}