{"version":3,"file":"dedupe.js","sourceRoot":"","sources":["../../src/integrations/dedupe.ts"],"names":[],"mappings":"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","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent, SentryException, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils/logger';\nimport { getEventDescription } from '@sentry/utils/misc';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  private previousEvent?: SentryEvent;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (currentEvent: SentryEvent) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (self.shouldDropEvent(currentEvent, self.previousEvent)) {\n            return null;\n          }\n        } catch (_oO) {\n          return (self.previousEvent = currentEvent);\n        }\n\n        return (self.previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n\n  /** JSDoc */\n  public shouldDropEvent(currentEvent: SentryEvent, previousEvent?: SentryEvent): boolean {\n    if (!previousEvent) {\n      return false;\n    }\n\n    if (this.isSameMessageEvent(currentEvent, previousEvent)) {\n      logger.warn(\n        `Event dropped due to being a duplicate of previous event (same message).\\nEvent: ${getEventDescription(\n          currentEvent,\n        )}`,\n      );\n      return true;\n    }\n\n    if (this.isSameExceptionEvent(currentEvent, previousEvent)) {\n      logger.warn(\n        `Event dropped due to being a duplicate of previous event (same exception).\\nEvent: ${getEventDescription(\n          currentEvent,\n        )}`,\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /** JSDoc */\n  private isSameMessageEvent(currentEvent: SentryEvent, previousEvent: SentryEvent): boolean {\n    const currentMessage = currentEvent.message;\n    const previousMessage = previousEvent.message;\n\n    // If no event has a message, they were both exceptions, so bail out\n    if (!currentMessage && !previousMessage) {\n      return false;\n    }\n\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n      return false;\n    }\n\n    if (currentMessage !== previousMessage) {\n      return false;\n    }\n\n    if (!this.isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this.isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private getFramesFromEvent(event: SentryEvent): StackFrame[] | undefined {\n    const exception = event.exception;\n\n    if (exception) {\n      try {\n        // @ts-ignore\n        return exception.values[0].stacktrace.frames;\n      } catch (_oO) {\n        return undefined;\n      }\n    } else if (event.stacktrace) {\n      return event.stacktrace.frames;\n    } else {\n      return undefined;\n    }\n  }\n\n  /** JSDoc */\n  private isSameStacktrace(currentEvent: SentryEvent, previousEvent: SentryEvent): boolean {\n    let currentFrames = this.getFramesFromEvent(currentEvent);\n    let previousFrames = this.getFramesFromEvent(previousEvent);\n\n    // If no event has a fingerprint, they are assumed to be the same\n    if (!currentFrames && !previousFrames) {\n      return true;\n    }\n\n    // If only one event has a stacktrace, but not the other one, they are not the same\n    if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n      return false;\n    }\n\n    currentFrames = currentFrames as StackFrame[];\n    previousFrames = previousFrames as StackFrame[];\n\n    // If number of frames differ, they are not the same\n    if (previousFrames.length !== currentFrames.length) {\n      return false;\n    }\n\n    // Otherwise, compare the two\n    for (let i = 0; i < previousFrames.length; i++) {\n      const frameA = previousFrames[i];\n      const frameB = currentFrames[i];\n\n      if (\n        frameA.filename !== frameB.filename ||\n        frameA.lineno !== frameB.lineno ||\n        frameA.colno !== frameB.colno ||\n        frameA.function !== frameB.function\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private getExceptionFromEvent(event: SentryEvent): SentryException | undefined {\n    return event.exception && event.exception.values && event.exception.values[0];\n  }\n\n  /** JSDoc */\n  private isSameExceptionEvent(currentEvent: SentryEvent, previousEvent: SentryEvent): boolean {\n    const previousException = this.getExceptionFromEvent(previousEvent);\n    const currentException = this.getExceptionFromEvent(currentEvent);\n\n    if (!previousException || !currentException) {\n      return false;\n    }\n\n    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n      return false;\n    }\n\n    if (!this.isSameFingerprint(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    if (!this.isSameStacktrace(currentEvent, previousEvent)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** JSDoc */\n  private isSameFingerprint(currentEvent: SentryEvent, previousEvent: SentryEvent): boolean {\n    let currentFingerprint = currentEvent.fingerprint;\n    let previousFingerprint = previousEvent.fingerprint;\n\n    // If no event has a fingerprint, they are assumed to be the same\n    if (!currentFingerprint && !previousFingerprint) {\n      return true;\n    }\n\n    // If only one event has a fingerprint, but not the other one, they are not the same\n    if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n      return false;\n    }\n\n    currentFingerprint = currentFingerprint as string[];\n    previousFingerprint = previousFingerprint as string[];\n\n    // Otherwise, compare the two\n    try {\n      return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n    } catch (_oO) {\n      return false;\n    }\n  }\n}\n"]}