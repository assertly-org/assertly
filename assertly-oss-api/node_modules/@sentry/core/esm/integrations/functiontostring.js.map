{"version":3,"file":"functiontostring.js","sourceRoot":"","sources":["../../src/integrations/functiontostring.ts"],"names":[],"mappings":"AAEA,IAAI,wBAAoC,CAAC;AAEzC,uEAAuE;AACvE,MAAM,OAAO,gBAAgB;IAA7B;QACE;;WAEG;QACI,SAAI,GAAW,gBAAgB,CAAC,EAAE,CAAC;IAmB5C,CAAC;IAZC;;OAEG;IACI,SAAS;QACd,wBAAwB,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC;QAEvD,QAAQ,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAsC,GAAG,IAAW;YAChF,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC;YAClE,yCAAyC;YACzC,OAAO,wBAAwB,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC;IACJ,CAAC;;AAhBD;;GAEG;AACW,mBAAE,GAAW,kBAAkB,CAAC","sourcesContent":["import { Integration, SentryWrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    originalFunctionToString = Function.prototype.toString;\n\n    Function.prototype.toString = function(this: SentryWrappedFunction, ...args: any[]): string {\n      const context = this.__sentry__ ? this.__sentry_original__ : this;\n      // tslint:disable-next-line:no-unsafe-any\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n"]}