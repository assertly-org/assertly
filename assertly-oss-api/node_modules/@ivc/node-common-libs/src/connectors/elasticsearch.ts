import elasticsearch from 'elasticsearch';

const esClients: any = {};

export class Elasticsearch {
  public esClient: any;
  private context: any;

  constructor(context: any) {
    if (context.esClient) {
      this.esClient = esClients[context.esClient.name] = context.esClient;
    }

    this.context = context;
  }

  async init(name = 'main') {

    try {
      // only set up the client if not one passed in for dependency injection purposes
      if (Object.getOwnPropertyNames(esClients).length === 0) {
        const esOptions = {
          apiVersion: '6.5',
          ...this.context.config.elasticsearch
        };

        if (this.context.config.elasticsearch === true) esOptions.log = 'trace';

        this.esClient = esClients[name] = new elasticsearch.Client(esOptions);
      }

      await this.smokeTest();
    } catch (error) {
      console.log(`Error occured in the connection to elasticsearch: `, error);
      throw error;
    }
  }

  smokeTest() {
    return this.esClient.ping;
  }
}

// get a client by name, or default if none provided;
export const getESClient = (name = 'main') => esClients[name];

