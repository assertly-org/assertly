import redisWatchLib from 'redis-watch';
import * as _ from 'lodash';
import redis from 'ioredis';

export class Redis {
  public redisClient: any;
  private context: any;

  constructor(context: any) {
    this.redisClient = context.redisClient;
    this.context = context;
  }

  async init() {

    try {

      // only set up the client if not one passed in for dependency injection purposes
      if (!this.redisClient) {
        const redisConfig = _.cloneDeep(this.context.config.redis);
        redisConfig.dropBufferSupport = true;
        redisConfig.sentinelRetryStrategy = function (times: number) {
          const delay = Math.min(times * 10, 1000);
          console.log('Cannot connect to redis sentinels, there have been ' + times +
            ' attempts. Delaying ' + delay + ' milliseconds until next attempt.');
          return delay;
        };

        this.redisClient = new redis(this.context.config.redis)
          .on('error', function (err: Error) {
            console.log('redis error: ', err);
          })
          .on('connect', function () {
            console.log('redis connected');
          });

        // sets up a heardbeat watcher to detect silent failures in connectivity
        const redisWatch = redisWatchLib(this.context.config.redis);
        redisWatch.monitor();
      }

      await this.smokeTest();
    } catch (error) {
      console.log(`Error occured in the connection to redis: `, error);
      throw error;
    }
  }

  smokeTest() {
    return this.redisClient.get('smokeTestKey');
  }
}

