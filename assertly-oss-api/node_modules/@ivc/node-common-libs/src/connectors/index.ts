import { Redis } from './redis';
import { Elasticsearch } from './elasticsearch';
import { Postgres } from './postgres';

export * from './redis';
export * from './elasticsearch';
export * from './postgres';

const connections: any[] = [];
const clients: any = {};

/*
  Set up I/O connections to external systems
 */
export const initConnections = async (context: any) => {


  if (context.config.pg) {
    const pgClients = Object.getOwnPropertyNames(context.config.pg);
    pgClients.forEach((clientName) => {
      const client = new Postgres(context, clientName);
      connections.push(client);

      // default client
      if (clientName === 'business') {
        clients.postgres = client;
      }
    });
  }

  if (context.config.elasticsearch) {
    clients.elasticsearch = new Elasticsearch(context);
    connections.push(clients.elasticsearch);
  }

  if (context.config.redis) {
    clients.redis = new Redis(context);
    connections.push(clients.redis);
  }

  const connectionPromises = connections.map(conn => conn.init());

  // app requires all connections to complete initialization before handling requests
  await Promise.all(connectionPromises);

  return clients;
};

export const smokeTestConnections = async () => {

  const connectorSmokeTests = connections.map(conn => conn.smokeTest());

  await Promise.all(connectorSmokeTests);
  return { success: true };
};

