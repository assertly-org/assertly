
const _ = require('lodash');
const url = require('url');
const path = require('path');
const findRoot = require('find-root');
const fs = require('fs');

export const loadConfig = (configDir?: string) => {

  if (!configDir) {
    try {
      configDir = findRoot(process.cwd(), function (dir: string) { return fs.existsSync(path.resolve(dir, 'config.default.json')); });
    } catch (e) {
      console.log('node service: could not find config.default.json', e);
    }

    if (!configDir) configDir = '../../';
  }

  const public_config = require(path.resolve(configDir, 'config.default.json'));
  const initialDefaultConfig = _.cloneDeep(public_config);

  let private_config;
  try {
    private_config = require(path.resolve(configDir, 'config.local.json'));
  } catch (e) {
    console.log('node service: Missing File or Invalid JSON for config.local.json');
    private_config = {};
  }

  if (process.env.NODE_ENV !== 'production' && process.argv[2] === '--lab') {
    private_config = require(path.resolve(configDir, 'config.local.lab.json'));
  }

  if (process.env.NODE_ENV !== 'production' && process.argv[2] === '--mp') {
    private_config = require(path.resolve(configDir, 'config.local.mp.json'));
  }

  const config = _.extend(public_config, private_config);

  // support upgrading connection strings to json format
  if (config.pg && config.pg.business) {
    const connString = config.pg.business.pg_conn_string;
    const dbConnParams = url.parse(connString);
    const dbAuth = dbConnParams.auth.split(':');

    const pgConfigPoolSize = config.pg.business.pg_pool_size;
    const poolSize = pgConfigPoolSize ? pgConfigPoolSize : initialDefaultConfig.pg.business.pg_pool_size;

    config.pg.business = _.extend(config.pg.business, {
      user: dbAuth[0],
      password: dbAuth[1],
      host: dbConnParams.hostname,
      port: dbConnParams.port,
      database: connString.split('/')[3],
      max: poolSize
    });
  }

  return config;
};

export default loadConfig;

