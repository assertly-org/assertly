import { initSentry } from '../../src/app-startup/initMonitoring';

describe('sentry filter error', () => {
  const config = {
    errorMonitoring: {
        sentryIO: {
            highPriorityErrorResponseStatusCodes: [501]
        }
    }
  };

  let event = {};
  let hint: any = {};

  beforeEach(() => {
    event = { test: "test error" };
    hint = {
      originalException: {
          response: {
              statusCode: 501,
              request: {
                  url: '/test'
              }
          }
      }
    }
  })

  const sentry = new initSentry(config);
  it('should have high priority flag on high priority error', () => {
      hint.originalException.response.statusCode = 501;
      const result = sentry.filterError(event, hint);
      expect(result).toBeTruthy();
      expect(result.tags).toMatchObject({ highPriority: true });
  });

  it('should return error on non high priority error', () => {
      hint.originalException.response.statusCode = 404;
      const result = sentry.filterError(event, hint);
      expect(result).toBeTruthy();
  });

  it('should return null before expired time span', () => {
      hint.originalException.response.statusCode = 501;
      hint.originalException.response.request.url = '/testexpired';
      let result = sentry.filterError(event, hint);
      expect(result).toBeTruthy();
      result = sentry.filterError(event, hint);
      expect(result).toBeNull();
  });

  it('should return error when response is empty', () => {
      hint.originalException.response = undefined;
      const result = sentry.filterError(event, hint);
      expect(result).toBeTruthy();
  });

  it('should return null when request is null on high priority error', () => {
    hint.originalException.response.statusCode = 501;
    hint.originalException.response.request = undefined;
    const result = sentry.filterError(event, hint);
    expect(result).toBeNull();
  });
});
