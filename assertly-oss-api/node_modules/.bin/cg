#!/usr/bin/env node
"use strict";


/*  Top level ts-aspi analyzer program                         */
/*  Cheaply copied from npm with some of the keywords replaced */

;(function () {
  // windows: running "cg blah" in this folder will invoke WSH, not node.
  /*global WScript*/
  if (typeof WScript !== 'undefined') {
    WScript.echo(
      'cg does not work when run\n' +
        'with the Windows Scripting Host\n\n' +
        "'cd' to a different directory,\n" +
        "or type 'cg.cmd <args>',\n" +
        "or type 'node cg <args>'."
    )
    WScript.quit(1)
    return
  }

  process.title = 'cg'

  const path = require('path')
  const fs = require('fs');
  const mkdirp = require('mkdirp');
  const Promise = require('bluebird');
  const findRoot = require('find-root');
  const analyzer = require('../dist/analyzer')

  let program = require('commander');

  program
    .usage('[options] <files>')
    .option('-r, --root <rootdir>', 'rootdir []')
    .option('-o, --out <outdir>', 'outdir []')
    .option('-d, --debug')
    .parse(process.argv);

  const mkdirpSync = Promise.promisify(mkdirp);

  const main = Promise.coroutine(function*() {
    let outDir = program.out;
    let tsconfigPath;
    let packagePath;
    let tsInclude;
    let packageName;
    let srcRoot;

    let rootDir = findRoot(process.cwd(),function(dir) {
      return fs.existsSync(path.resolve(dir,"tsconfig.json"));
    });

    if(rootDir == null) rootDir = process.cwd();
    else {
      tsconfigPath = path.resolve(rootDir,"tsconfig.json");
      packagePath = path.resolve(rootDir,"package.json");
    }
    if(program.root != null) {
      rootDir = program.root;
      if(fs.existsSync(path.resolve(dir,"tsconfig.json"))) tsconfigPath = path.resolve(rootDir,"tsconfig.json");
      if(fs.existsSync(path.resolve(dir,"package.json"))) packagePath = path.resolve(rootDir,"package.json");
    }

    if(tsconfigPath != null) {
      let data = fs.readFileSync(tsconfigPath);
        
      try {
        let meta = JSON.parse(data);
  
        if(meta != null && meta.compilerOptions != null && meta.compilerOptions.outDir != null) 
          outDir = path.resolve(rootDir,meta.compilerOptions.outDir);
        if(meta != null && meta.compilerOptions != null && meta.compilerOptions.rootDir != null) 
          srcRoot = path.resolve(rootDir,meta.compilerOptions.rootDir);
        if(meta != null && meta.include != null) tsInclude = meta.include;
      }
      catch(e) {
        console.err(`could not parse ${tsconfigPath}: ${e.what()}`);
      }
    }

    if(packagePath != null) {
      let data = fs.readFileSync(packagePath);

      try {
        let meta = JSON.parse(data);
 
        if(meta != null && meta.name != null) packageName = meta.name;
      }
      catch(e) {
        console.err(`could not parse ${packagePath}: ${e.what()}`);
      }
    }

    if(outDir == null) outDir = rootDir;
    if(packageName == null) packageName = "project";

    let docsPath = path.resolve(outDir,"docs");

    try {
      let stats = fs.statSync(docsPath);
    
      if(!stats.isDirectory()) throw(`${docsPath} is not a valid directory`);
    }
    catch(e) {
     yield mkdirpSync(docsPath);
    }


    let checkPath = path.resolve(outDir,"__check.js");
    let swaggerPath = path.resolve(outDir,"docs/swagger.json");
    let redocPath = path.resolve(outDir,"docs/redoc.html");
    let routesPath = path.resolve(outDir,"__routes.js");
    let checkFile = fs.createWriteStream(checkPath,{ mode:0o644 });
    let swaggerFile = fs.createWriteStream(swaggerPath,{ mode:0o644 });
    let redocFile = fs.createWriteStream(redocPath,{ mode:0o644 });
    let routesFile = fs.createWriteStream(routesPath,{ mode:0o644 });
    let env = { 
      programArgs: program.args,
      tsInclude: tsInclude, 
      rootDir: rootDir,
      srcRoot: srcRoot,
      outDir: outDir,
      packageName: packageName,
      debug: program.debug
    };

    analyzer.generate(env,checkFile,swaggerFile,redocFile,routesFile); 
  });

  main();
})()

